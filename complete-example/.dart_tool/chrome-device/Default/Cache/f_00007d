define(['dart_sdk', 'packages/flutter/src/painting/colors.dart', 'packages/flutter/src/painting/_network_image_web.dart', 'packages/flutter/src/painting/image_stream.dart', 'packages/flutter/src/foundation/debug.dart', 'packages/collection/src/priority_queue.dart'], (function load__packages__palette_generator__palette_generator_dart(dart_sdk, packages__flutter__src__painting__colors$46dart, packages__flutter__src__painting___network_image_web$46dart, packages__flutter__src__painting__image_stream$46dart, packages__flutter__src__foundation__debug$46dart, packages__collection__src__priority_queue$46dart) {
  'use strict';
  const core = dart_sdk.core;
  const _js_helper = dart_sdk._js_helper;
  const ui = dart_sdk.ui;
  const async = dart_sdk.async;
  const _internal = dart_sdk._internal;
  const collection = dart_sdk.collection;
  const _interceptors = dart_sdk._interceptors;
  const math = dart_sdk.math;
  const typed_data = dart_sdk.typed_data;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const colors = packages__flutter__src__painting__colors$46dart.src__painting__colors;
  const image_provider = packages__flutter__src__painting___network_image_web$46dart.src__painting__image_provider;
  const image_stream = packages__flutter__src__painting__image_stream$46dart.src__painting__image_stream;
  const diagnostics = packages__flutter__src__foundation__debug$46dart.src__foundation__diagnostics;
  const priority_queue = packages__collection__src__priority_queue$46dart.src__priority_queue;
  var palette_generator = Object.create(dart.library);
  var $_get = dartx._get;
  var $isEmpty = dartx.isEmpty;
  var $compareTo = dartx.compareTo;
  var $sort = dartx.sort;
  var $plus = dartx['+'];
  var $_set = dartx._set;
  var $abs = dartx.abs;
  var $_equals = dartx._equals;
  var $truncate = dartx.truncate;
  var $sublist = dartx.sublist;
  var $replaceRange = dartx.replaceRange;
  var $round = dartx.round;
  var $length = dartx.length;
  var $remove = dartx.remove;
  var $isNotEmpty = dartx.isNotEmpty;
  var $floor = dartx.floor;
  var $getUint32 = dartx.getUint32;
  var $rightShift = dartx['>>'];
  var $clear = dartx.clear;
  var $add = dartx.add;
  var $addAll = dartx.addAll;
  var $toList = dartx.toList;
  dart._checkModuleNullSafetyMode(true);
  var T = {
    LinkedMapOfPaletteTarget$PaletteColor: () => (T.LinkedMapOfPaletteTarget$PaletteColor = dart.constFn(_js_helper.LinkedMap$(palette_generator.PaletteTarget, palette_generator.PaletteColor)))(),
    HSLColorTobool: () => (T.HSLColorTobool = dart.constFn(dart.fnType(core.bool, [colors.HSLColor])))(),
    CompleterOfImage: () => (T.CompleterOfImage = dart.constFn(async.Completer$(ui.Image)))(),
    VoidToImageStreamListener: () => (T.VoidToImageStreamListener = dart.constFn(dart.fnType(image_stream.ImageStreamListener, [])))(),
    ImageStreamListenerTodynamic: () => (T.ImageStreamListenerTodynamic = dart.constFn(dart.fnType(dart.dynamic, [image_stream.ImageStreamListener])))(),
    ImageInfoAndboolTovoid: () => (T.ImageInfoAndboolTovoid = dart.constFn(dart.fnType(dart.void, [image_stream.ImageInfo, core.bool])))(),
    VoidTovoid: () => (T.VoidTovoid = dart.constFn(dart.fnType(dart.void, [])))(),
    SyncIterableOfColor: () => (T.SyncIterableOfColor = dart.constFn(_js_helper.SyncIterable$(ui.Color)))(),
    PaletteColorAndPaletteColorToint: () => (T.PaletteColorAndPaletteColorToint = dart.constFn(dart.fnType(core.int, [palette_generator.PaletteColor, palette_generator.PaletteColor])))(),
    LinkedHashSetOfPaletteTarget: () => (T.LinkedHashSetOfPaletteTarget = dart.constFn(collection.LinkedHashSet$(palette_generator.PaletteTarget)))(),
    LinkedHashSetOfColor: () => (T.LinkedHashSetOfColor = dart.constFn(collection.LinkedHashSet$(ui.Color)))(),
    IterablePropertyOfPaletteColor: () => (T.IterablePropertyOfPaletteColor = dart.constFn(diagnostics.IterableProperty$(palette_generator.PaletteColor)))(),
    JSArrayOfPaletteColor: () => (T.JSArrayOfPaletteColor = dart.constFn(_interceptors.JSArray$(palette_generator.PaletteColor)))(),
    IterablePropertyOfPaletteTarget: () => (T.IterablePropertyOfPaletteTarget = dart.constFn(diagnostics.IterableProperty$(palette_generator.PaletteTarget)))(),
    JSArrayOfPaletteTarget: () => (T.JSArrayOfPaletteTarget = dart.constFn(_interceptors.JSArray$(palette_generator.PaletteTarget)))(),
    ColorAndColorAndintTodouble: () => (T.ColorAndColorAndintTodouble = dart.constFn(dart.fnType(core.double, [ui.Color, ui.Color, core.int])))(),
    DiagnosticsPropertyOfColor: () => (T.DiagnosticsPropertyOfColor = dart.constFn(diagnostics.DiagnosticsProperty$(ui.Color)))(),
    intAndintAndintToint: () => (T.intAndintAndintToint = dart.constFn(dart.fnType(core.int, [core.int, core.int, core.int])))(),
    ColorAndColorToint: () => (T.ColorAndColorToint = dart.constFn(dart.fnType(core.int, [ui.Color, ui.Color])))(),
    MapOfint$_ColorCount: () => (T.MapOfint$_ColorCount = dart.constFn(core.Map$(core.int, palette_generator._ColorCount)))(),
    MapOfint$MapOfint$_ColorCount: () => (T.MapOfint$MapOfint$_ColorCount = dart.constFn(core.Map$(core.int, T.MapOfint$_ColorCount())))(),
    IdentityMapOfint$MapOfint$MapOfint$_ColorCount: () => (T.IdentityMapOfint$MapOfint$MapOfint$_ColorCount = dart.constFn(_js_helper.IdentityMap$(core.int, T.MapOfint$MapOfint$_ColorCount())))(),
    DoubleLinkedQueueOfColor: () => (T.DoubleLinkedQueueOfColor = dart.constFn(collection.DoubleLinkedQueue$(ui.Color)))(),
    IdentityMapOfint$MapOfint$_ColorCount: () => (T.IdentityMapOfint$MapOfint$_ColorCount = dart.constFn(_js_helper.IdentityMap$(core.int, T.MapOfint$_ColorCount())))(),
    IdentityMapOfint$_ColorCount: () => (T.IdentityMapOfint$_ColorCount = dart.constFn(_js_helper.IdentityMap$(core.int, palette_generator._ColorCount)))(),
    ColorTobool: () => (T.ColorTobool = dart.constFn(dart.fnType(core.bool, [ui.Color])))(),
    ListOfPaletteColor: () => (T.ListOfPaletteColor = dart.constFn(core.List$(palette_generator.PaletteColor)))(),
    ColorToColor: () => (T.ColorToColor = dart.constFn(dart.fnType(ui.Color, [ui.Color])))(),
    _ColorVolumeBoxAnd_ColorVolumeBoxToint: () => (T._ColorVolumeBoxAnd_ColorVolumeBoxToint = dart.constFn(dart.fnType(core.int, [palette_generator._ColorVolumeBox, palette_generator._ColorVolumeBox])))(),
    HeapPriorityQueueOf_ColorVolumeBox: () => (T.HeapPriorityQueueOf_ColorVolumeBox = dart.constFn(priority_queue.HeapPriorityQueue$(palette_generator._ColorVolumeBox)))()
  };
  var T$Eval = Object.assign({
    _: () => T$Eval
  }, T);
  var S = {
    _: () => S
  };
  var S$Eval = Object.assign({
    _: () => S$Eval
  }, S);
  const CT = Object.create({
    _: () => (C, CT)
  });
  dart.defineLazy(CT, {
    get C0() {
      return C[0] = dart.constList([], palette_generator.PaletteTarget);
    },
    get C2() {
      return C[2] = dart.fn(palette_generator.avoidRedBlackWhitePaletteFilter, T.HSLColorTobool());
    },
    get C1() {
      return C[1] = dart.constList([C[2] || CT.C2], T.HSLColorTobool());
    },
    get C3() {
      return C[3] = dart.const({
        __proto__: core.Duration.prototype,
        [Duration__duration]: 15000000
      });
    },
    get C4() {
      return C[4] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4294967295.0
      });
    },
    get C5() {
      return C[5] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4278190080.0
      });
    },
    get C6() {
      return C[6] = dart.const({
        __proto__: palette_generator._ColorComponent.prototype,
        [_name$]: "_ColorComponent.red",
        index: 0
      });
    },
    get C7() {
      return C[7] = dart.const({
        __proto__: palette_generator._ColorComponent.prototype,
        [_name$]: "_ColorComponent.green",
        index: 1
      });
    },
    get C8() {
      return C[8] = dart.const({
        __proto__: palette_generator._ColorComponent.prototype,
        [_name$]: "_ColorComponent.blue",
        index: 2
      });
    },
    get C9() {
      return C[9] = dart.constList([C[6] || CT.C6, C[7] || CT.C7, C[8] || CT.C8], palette_generator._ColorComponent);
    }
  }, false);
  var C = Array(10).fill(void 0);
  var I = [
    "file:///D:/flutter/.pub-cache/hosted/pub.dartlang.org/palette_generator-0.3.0/lib/palette_generator.dart",
    "package:palette_generator/palette_generator.dart"
  ];
  var selectedSwatches = dart.privateName(palette_generator, "PaletteGenerator.selectedSwatches");
  var paletteColors$ = dart.privateName(palette_generator, "PaletteGenerator.paletteColors");
  var targets$ = dart.privateName(palette_generator, "PaletteGenerator.targets");
  var _dominantColor = dart.privateName(palette_generator, "_dominantColor");
  var _sortSwatches = dart.privateName(palette_generator, "_sortSwatches");
  var _selectSwatches = dart.privateName(palette_generator, "_selectSwatches");
  var Duration__duration = dart.privateName(core, "Duration._duration");
  var _normalizeWeights = dart.privateName(palette_generator, "_normalizeWeights");
  var _generateScoredTarget = dart.privateName(palette_generator, "_generateScoredTarget");
  var _getMaxScoredSwatchForTarget = dart.privateName(palette_generator, "_getMaxScoredSwatchForTarget");
  var _shouldBeScoredForTarget = dart.privateName(palette_generator, "_shouldBeScoredForTarget");
  var _generateScore = dart.privateName(palette_generator, "_generateScore");
  const Object_Diagnosticable$36 = class Object_Diagnosticable extends core.Object {};
  (Object_Diagnosticable$36.new = function() {
  }).prototype = Object_Diagnosticable$36.prototype;
  dart.applyMixin(Object_Diagnosticable$36, diagnostics.Diagnosticable);
  palette_generator.PaletteGenerator = class PaletteGenerator extends Object_Diagnosticable$36 {
    get selectedSwatches() {
      return this[selectedSwatches];
    }
    set selectedSwatches(value) {
      super.selectedSwatches = value;
    }
    get paletteColors() {
      return this[paletteColors$];
    }
    set paletteColors(value) {
      super.paletteColors = value;
    }
    get targets() {
      return this[targets$];
    }
    set targets(value) {
      super.targets = value;
    }
    static fromImage(image, opts) {
      if (image == null) dart.nullFailed(I[0], 95, 14, "image");
      let region = opts && 'region' in opts ? opts.region : null;
      let maximumColorCount = opts && 'maximumColorCount' in opts ? opts.maximumColorCount : 16;
      if (maximumColorCount == null) dart.nullFailed(I[0], 97, 9, "maximumColorCount");
      let filters = opts && 'filters' in opts ? opts.filters : C[1] || CT.C1;
      if (filters == null) dart.nullFailed(I[0], 98, 25, "filters");
      let targets = opts && 'targets' in opts ? opts.targets : C[0] || CT.C0;
      if (targets == null) dart.nullFailed(I[0], 101, 25, "targets");
      return async.async(palette_generator.PaletteGenerator, function* fromImage() {
        if (!(region == null || !dart.equals(region, ui.Rect.zero))) dart.assertFailed(null, I[0], 103, 12, "region == null || region != Rect.zero");
        if (!(region == null || dart.notNull(region.topLeft.dx) >= 0.0 && dart.notNull(region.topLeft.dy) >= 0.0)) dart.assertFailed("Region " + dart.str(region) + " is outside the image " + dart.str(image.width) + "x" + dart.str(image.height), I[0], 105, 9, "region == null ||\n            (region.topLeft.dx >= 0.0 && region.topLeft.dy >= 0.0)");
        if (!(region == null || dart.notNull(region.bottomRight.dx) <= dart.notNull(image.width) && dart.notNull(region.bottomRight.dy) <= dart.notNull(image.height))) dart.assertFailed("Region " + dart.str(region) + " is outside the image " + dart.str(image.width) + "x" + dart.str(image.height), I[0], 109, 9, "region == null ||\n            (region.bottomRight.dx <= image.width &&\n                region.bottomRight.dy <= image.height)");
        let quantizer = new palette_generator._ColorCutQuantizer.new(image, {maxColors: maximumColorCount, filters: filters, region: region});
        let colors = (yield quantizer.quantizedColors);
        return new palette_generator.PaletteGenerator.fromColors(colors, {targets: targets});
      });
    }
    static fromImageProvider(imageProvider, opts) {
      if (imageProvider == null) dart.nullFailed(I[0], 153, 19, "imageProvider");
      let size = opts && 'size' in opts ? opts.size : null;
      let region = opts && 'region' in opts ? opts.region : null;
      let maximumColorCount = opts && 'maximumColorCount' in opts ? opts.maximumColorCount : 16;
      if (maximumColorCount == null) dart.nullFailed(I[0], 156, 9, "maximumColorCount");
      let filters = opts && 'filters' in opts ? opts.filters : C[1] || CT.C1;
      if (filters == null) dart.nullFailed(I[0], 157, 25, "filters");
      let targets = opts && 'targets' in opts ? opts.targets : C[0] || CT.C0;
      if (targets == null) dart.nullFailed(I[0], 160, 25, "targets");
      let timeout = opts && 'timeout' in opts ? opts.timeout : C[3] || CT.C3;
      if (timeout == null) dart.nullFailed(I[0], 161, 14, "timeout");
      return async.async(palette_generator.PaletteGenerator, function* fromImageProvider() {
        if (!(region == null || size != null)) dart.assertFailed(null, I[0], 163, 12, "region == null || size != null");
        if (!(region == null || !dart.equals(region, ui.Rect.zero))) dart.assertFailed(null, I[0], 164, 12, "region == null || region != Rect.zero");
        if (!(region == null || dart.notNull(region.topLeft.dx) >= 0.0 && dart.notNull(region.topLeft.dy) >= 0.0)) dart.assertFailed("Region " + dart.str(region) + " is outside the image " + dart.str(dart.nullCheck(size).width) + "x" + dart.str(size.height), I[0], 166, 9, "region == null ||\n            (region.topLeft.dx >= 0.0 && region.topLeft.dy >= 0.0)");
        if (!(region == null || dart.test(dart.nullCheck(size).contains(region.topLeft)))) dart.assertFailed("Region " + dart.str(region) + " is outside the image " + dart.str(size), I[0], 169, 12, "region == null || size!.contains(region.topLeft)");
        if (!(region == null || dart.notNull(region.bottomRight.dx) <= dart.notNull(dart.nullCheck(size).width) && dart.notNull(region.bottomRight.dy) <= dart.notNull(size.height))) dart.assertFailed("Region " + dart.str(region) + " is outside the image " + dart.str(size), I[0], 172, 9, "region == null ||\n            (region.bottomRight.dx <= size!.width &&\n                region.bottomRight.dy <= size.height)");
        let stream = imageProvider.resolve(new image_provider.ImageConfiguration.new({size: size, devicePixelRatio: 1.0}));
        let imageCompleter = T.CompleterOfImage().new();
        let loadFailureTimeout = null;
        let listener = null;
        function listener$35get() {
          let t1;
          t1 = listener;
          return t1 == null ? dart.throw(new _internal.LateError.localNI("listener")) : t1;
        }
        dart.fn(listener$35get, T.VoidToImageStreamListener());
        function listener$35set(t2) {
          if (t2 == null) dart.nullFailed(I[0], 181, 30, "null");
          return listener = t2;
        }
        dart.fn(listener$35set, T.ImageStreamListenerTodynamic());
        listener$35set(new image_stream.ImageStreamListener.new(dart.fn((info, synchronousCall) => {
          let t4;
          if (info == null) dart.nullFailed(I[0], 182, 47, "info");
          if (synchronousCall == null) dart.nullFailed(I[0], 182, 58, "synchronousCall");
          t4 = loadFailureTimeout;
          t4 == null ? null : t4.cancel();
          stream.removeListener(listener$35get());
          imageCompleter.complete(info.image);
        }, T.ImageInfoAndboolTovoid())));
        if (!dart.equals(timeout, core.Duration.zero)) {
          loadFailureTimeout = async.Timer.new(timeout, dart.fn(() => {
            stream.removeListener(listener$35get());
            imageCompleter.completeError(new async.TimeoutException.new("Timeout occurred trying to load from " + dart.str(imageProvider)));
          }, T.VoidTovoid()));
        }
        stream.addListener(listener$35get());
        let image = (yield imageCompleter.future);
        let newRegion = region;
        if (size != null && region != null) {
          let scale = dart.notNull(image.width) / dart.notNull(size.width);
          newRegion = new ui.Rect.fromLTRB(dart.notNull(region.left) * scale, dart.notNull(region.top) * scale, dart.notNull(region.right) * scale, dart.notNull(region.bottom) * scale);
        }
        return palette_generator.PaletteGenerator.fromImage(image, {region: newRegion, maximumColorCount: maximumColorCount, filters: filters, targets: targets});
      });
    }
    get colors() {
      return new (T.SyncIterableOfColor()).new((function* colors() {
        for (let paletteColor of this.paletteColors) {
          yield paletteColor.color;
        }
      }).bind(this));
    }
    get vibrantColor() {
      return this.selectedSwatches[$_get](palette_generator.PaletteTarget.vibrant);
    }
    get lightVibrantColor() {
      return this.selectedSwatches[$_get](palette_generator.PaletteTarget.lightVibrant);
    }
    get darkVibrantColor() {
      return this.selectedSwatches[$_get](palette_generator.PaletteTarget.darkVibrant);
    }
    get mutedColor() {
      return this.selectedSwatches[$_get](palette_generator.PaletteTarget.muted);
    }
    get lightMutedColor() {
      return this.selectedSwatches[$_get](palette_generator.PaletteTarget.lightMuted);
    }
    get darkMutedColor() {
      return this.selectedSwatches[$_get](palette_generator.PaletteTarget.darkMuted);
    }
    get dominantColor() {
      return this[_dominantColor];
    }
    [_sortSwatches]() {
      if (dart.test(this.paletteColors[$isEmpty])) {
        this[_dominantColor] = null;
        return;
      }
      this.paletteColors[$sort](dart.fn((a, b) => {
        if (a == null) dart.nullFailed(I[0], 278, 38, "a");
        if (b == null) dart.nullFailed(I[0], 278, 54, "b");
        return b.population[$compareTo](a.population);
      }, T.PaletteColorAndPaletteColorToint()));
      this[_dominantColor] = this.paletteColors[$_get](0);
    }
    [_selectSwatches]() {
      let allTargets = T.LinkedHashSetOfPaletteTarget().from(this.targets[$plus](palette_generator.PaletteTarget.baseTargets));
      let usedColors = T.LinkedHashSetOfColor().new();
      for (let target of allTargets) {
        target[_normalizeWeights]();
        let targetScore = this[_generateScoredTarget](target, usedColors);
        if (targetScore != null) {
          this.selectedSwatches[$_set](target, targetScore);
        }
      }
    }
    [_generateScoredTarget](target, usedColors) {
      if (target == null) dart.nullFailed(I[0], 299, 21, "target");
      if (usedColors == null) dart.nullFailed(I[0], 299, 40, "usedColors");
      let maxScoreSwatch = this[_getMaxScoredSwatchForTarget](target, usedColors);
      if (maxScoreSwatch != null && dart.test(target.isExclusive)) {
        usedColors.add(maxScoreSwatch.color);
      }
      return maxScoreSwatch;
    }
    [_getMaxScoredSwatchForTarget](target, usedColors) {
      if (target == null) dart.nullFailed(I[0], 311, 21, "target");
      if (usedColors == null) dart.nullFailed(I[0], 311, 40, "usedColors");
      let maxScore = 0.0;
      let maxScoreSwatch = null;
      for (let paletteColor of this.paletteColors) {
        if (dart.test(this[_shouldBeScoredForTarget](paletteColor, target, usedColors))) {
          let score = this[_generateScore](paletteColor, target);
          if (maxScoreSwatch == null || dart.notNull(score) > dart.notNull(maxScore)) {
            maxScoreSwatch = paletteColor;
            maxScore = score;
          }
        }
      }
      return maxScoreSwatch;
    }
    [_shouldBeScoredForTarget](paletteColor, target, usedColors) {
      if (paletteColor == null) dart.nullFailed(I[0], 327, 20, "paletteColor");
      if (target == null) dart.nullFailed(I[0], 327, 48, "target");
      if (usedColors == null) dart.nullFailed(I[0], 327, 67, "usedColors");
      let hslColor = colors.HSLColor.fromColor(paletteColor.color);
      return dart.notNull(hslColor.saturation) >= dart.notNull(target.minimumSaturation) && dart.notNull(hslColor.saturation) <= dart.notNull(target.maximumSaturation) && dart.notNull(hslColor.lightness) >= dart.notNull(target.minimumLightness) && dart.notNull(hslColor.lightness) <= dart.notNull(target.maximumLightness) && !dart.test(usedColors.contains(paletteColor.color));
    }
    [_generateScore](paletteColor, target) {
      if (paletteColor == null) dart.nullFailed(I[0], 338, 38, "paletteColor");
      if (target == null) dart.nullFailed(I[0], 338, 66, "target");
      let hslColor = colors.HSLColor.fromColor(paletteColor.color);
      let saturationScore = 0.0;
      let valueScore = 0.0;
      let populationScore = 0.0;
      if (dart.notNull(target.saturationWeight) > 0.0) {
        saturationScore = dart.notNull(target.saturationWeight) * (1.0 - (dart.notNull(hslColor.saturation) - dart.notNull(target.targetSaturation))[$abs]());
      }
      if (dart.notNull(target.lightnessWeight) > 0.0) {
        valueScore = dart.notNull(target.lightnessWeight) * (1.0 - (dart.notNull(hslColor.lightness) - dart.notNull(target.targetLightness))[$abs]());
      }
      if (this[_dominantColor] != null && dart.notNull(target.populationWeight) > 0.0) {
        populationScore = dart.notNull(target.populationWeight) * (dart.notNull(paletteColor.population) / dart.notNull(dart.nullCheck(this[_dominantColor]).population));
      }
      return saturationScore + valueScore + populationScore;
    }
    debugFillProperties(properties) {
      if (properties == null) dart.nullFailed(I[0], 362, 56, "properties");
      super.debugFillProperties(properties);
      properties.add(new (T.IterablePropertyOfPaletteColor()).new("paletteColors", this.paletteColors, {defaultValue: T.JSArrayOfPaletteColor().of([])}));
      properties.add(new (T.IterablePropertyOfPaletteTarget()).new("targets", this.targets, {defaultValue: palette_generator.PaletteTarget.baseTargets}));
    }
  };
  (palette_generator.PaletteGenerator.fromColors = function(paletteColors, opts) {
    if (paletteColors == null) dart.nullFailed(I[0], 70, 10, "paletteColors");
    let targets = opts && 'targets' in opts ? opts.targets : C[0] || CT.C0;
    if (targets == null) dart.nullFailed(I[0], 71, 10, "targets");
    this[_dominantColor] = null;
    this[paletteColors$] = paletteColors;
    this[targets$] = targets;
    this[selectedSwatches] = new (T.LinkedMapOfPaletteTarget$PaletteColor()).new();
    this[_sortSwatches]();
    this[_selectSwatches]();
  }).prototype = palette_generator.PaletteGenerator.prototype;
  dart.addTypeTests(palette_generator.PaletteGenerator);
  dart.addTypeCaches(palette_generator.PaletteGenerator);
  dart.setMethodSignature(palette_generator.PaletteGenerator, () => ({
    __proto__: dart.getMethods(palette_generator.PaletteGenerator.__proto__),
    [_sortSwatches]: dart.fnType(dart.void, []),
    [_selectSwatches]: dart.fnType(dart.void, []),
    [_generateScoredTarget]: dart.fnType(dart.nullable(palette_generator.PaletteColor), [palette_generator.PaletteTarget, core.Set$(ui.Color)]),
    [_getMaxScoredSwatchForTarget]: dart.fnType(dart.nullable(palette_generator.PaletteColor), [palette_generator.PaletteTarget, core.Set$(ui.Color)]),
    [_shouldBeScoredForTarget]: dart.fnType(core.bool, [palette_generator.PaletteColor, palette_generator.PaletteTarget, core.Set$(ui.Color)]),
    [_generateScore]: dart.fnType(core.double, [palette_generator.PaletteColor, palette_generator.PaletteTarget])
  }));
  dart.setGetterSignature(palette_generator.PaletteGenerator, () => ({
    __proto__: dart.getGetters(palette_generator.PaletteGenerator.__proto__),
    colors: core.Iterable$(ui.Color),
    vibrantColor: dart.nullable(palette_generator.PaletteColor),
    lightVibrantColor: dart.nullable(palette_generator.PaletteColor),
    darkVibrantColor: dart.nullable(palette_generator.PaletteColor),
    mutedColor: dart.nullable(palette_generator.PaletteColor),
    lightMutedColor: dart.nullable(palette_generator.PaletteColor),
    darkMutedColor: dart.nullable(palette_generator.PaletteColor),
    dominantColor: dart.nullable(palette_generator.PaletteColor)
  }));
  dart.setLibraryUri(palette_generator.PaletteGenerator, I[1]);
  dart.setFieldSignature(palette_generator.PaletteGenerator, () => ({
    __proto__: dart.getFields(palette_generator.PaletteGenerator.__proto__),
    selectedSwatches: dart.finalFieldType(core.Map$(palette_generator.PaletteTarget, palette_generator.PaletteColor)),
    paletteColors: dart.finalFieldType(core.List$(palette_generator.PaletteColor)),
    targets: dart.finalFieldType(core.List$(palette_generator.PaletteTarget)),
    [_dominantColor]: dart.fieldType(dart.nullable(palette_generator.PaletteColor))
  }));
  dart.defineLazy(palette_generator.PaletteGenerator, {
    /*palette_generator.PaletteGenerator._defaultCalculateNumberColors*/get _defaultCalculateNumberColors() {
      return 16;
    }
  }, false);
  var minimumSaturation$ = dart.privateName(palette_generator, "PaletteTarget.minimumSaturation");
  var targetSaturation$ = dart.privateName(palette_generator, "PaletteTarget.targetSaturation");
  var maximumSaturation$ = dart.privateName(palette_generator, "PaletteTarget.maximumSaturation");
  var minimumLightness$ = dart.privateName(palette_generator, "PaletteTarget.minimumLightness");
  var targetLightness$ = dart.privateName(palette_generator, "PaletteTarget.targetLightness");
  var maximumLightness$ = dart.privateName(palette_generator, "PaletteTarget.maximumLightness");
  var isExclusive$ = dart.privateName(palette_generator, "PaletteTarget.isExclusive");
  var saturationWeight = dart.privateName(palette_generator, "PaletteTarget.saturationWeight");
  var lightnessWeight = dart.privateName(palette_generator, "PaletteTarget.lightnessWeight");
  var populationWeight = dart.privateName(palette_generator, "PaletteTarget.populationWeight");
  const Object_Diagnosticable$36$ = class Object_Diagnosticable extends core.Object {};
  (Object_Diagnosticable$36$.new = function() {
  }).prototype = Object_Diagnosticable$36$.prototype;
  dart.applyMixin(Object_Diagnosticable$36$, diagnostics.Diagnosticable);
  palette_generator.PaletteTarget = class PaletteTarget extends Object_Diagnosticable$36$ {
    get minimumSaturation() {
      return this[minimumSaturation$];
    }
    set minimumSaturation(value) {
      super.minimumSaturation = value;
    }
    get targetSaturation() {
      return this[targetSaturation$];
    }
    set targetSaturation(value) {
      super.targetSaturation = value;
    }
    get maximumSaturation() {
      return this[maximumSaturation$];
    }
    set maximumSaturation(value) {
      super.maximumSaturation = value;
    }
    get minimumLightness() {
      return this[minimumLightness$];
    }
    set minimumLightness(value) {
      super.minimumLightness = value;
    }
    get targetLightness() {
      return this[targetLightness$];
    }
    set targetLightness(value) {
      super.targetLightness = value;
    }
    get maximumLightness() {
      return this[maximumLightness$];
    }
    set maximumLightness(value) {
      super.maximumLightness = value;
    }
    get isExclusive() {
      return this[isExclusive$];
    }
    set isExclusive(value) {
      super.isExclusive = value;
    }
    get saturationWeight() {
      return this[saturationWeight];
    }
    set saturationWeight(value) {
      this[saturationWeight] = value;
    }
    get lightnessWeight() {
      return this[lightnessWeight];
    }
    set lightnessWeight(value) {
      this[lightnessWeight] = value;
    }
    get populationWeight() {
      return this[populationWeight];
    }
    set populationWeight(value) {
      this[populationWeight] = value;
    }
    [_normalizeWeights]() {
      let sum = dart.notNull(this.saturationWeight) + dart.notNull(this.lightnessWeight) + dart.notNull(this.populationWeight);
      if (sum !== 0.0) {
        this.saturationWeight = dart.notNull(this.saturationWeight) / sum;
        this.lightnessWeight = dart.notNull(this.lightnessWeight) / sum;
        this.populationWeight = dart.notNull(this.populationWeight) / sum;
      }
    }
    _equals(other) {
      if (other == null) return false;
      return core.identical(this.minimumSaturation, dart.dload(other, 'minimumSaturation')) && core.identical(this.targetSaturation, dart.dload(other, 'targetSaturation')) && core.identical(this.maximumSaturation, dart.dload(other, 'maximumSaturation')) && core.identical(this.minimumLightness, dart.dload(other, 'minimumLightness')) && core.identical(this.targetLightness, dart.dload(other, 'targetLightness')) && core.identical(this.maximumLightness, dart.dload(other, 'maximumLightness')) && core.identical(this.saturationWeight, dart.dload(other, 'saturationWeight')) && core.identical(this.lightnessWeight, dart.dload(other, 'lightnessWeight')) && core.identical(this.populationWeight, dart.dload(other, 'populationWeight'));
    }
    get hashCode() {
      return ui.hashValues(this.minimumSaturation, this.targetSaturation, this.maximumSaturation, this.minimumLightness, this.targetLightness, this.maximumLightness, this.saturationWeight, this.lightnessWeight, this.populationWeight);
    }
    debugFillProperties(properties) {
      if (properties == null) dart.nullFailed(I[0], 565, 56, "properties");
      super.debugFillProperties(properties);
      let defaultTarget = new palette_generator.PaletteTarget.new();
      properties.add(new diagnostics.DoubleProperty.new("minimumSaturation", this.minimumSaturation, {defaultValue: defaultTarget.minimumSaturation}));
      properties.add(new diagnostics.DoubleProperty.new("targetSaturation", this.targetSaturation, {defaultValue: defaultTarget.targetSaturation}));
      properties.add(new diagnostics.DoubleProperty.new("maximumSaturation", this.maximumSaturation, {defaultValue: defaultTarget.maximumSaturation}));
      properties.add(new diagnostics.DoubleProperty.new("minimumLightness", this.minimumLightness, {defaultValue: defaultTarget.minimumLightness}));
      properties.add(new diagnostics.DoubleProperty.new("targetLightness", this.targetLightness, {defaultValue: defaultTarget.targetLightness}));
      properties.add(new diagnostics.DoubleProperty.new("maximumLightness", this.maximumLightness, {defaultValue: defaultTarget.maximumLightness}));
      properties.add(new diagnostics.DoubleProperty.new("saturationWeight", this.saturationWeight, {defaultValue: defaultTarget.saturationWeight}));
      properties.add(new diagnostics.DoubleProperty.new("lightnessWeight", this.lightnessWeight, {defaultValue: defaultTarget.lightnessWeight}));
      properties.add(new diagnostics.DoubleProperty.new("populationWeight", this.populationWeight, {defaultValue: defaultTarget.populationWeight}));
    }
  };
  (palette_generator.PaletteTarget.new = function(opts) {
    let minimumSaturation = opts && 'minimumSaturation' in opts ? opts.minimumSaturation : 0;
    if (minimumSaturation == null) dart.nullFailed(I[0], 384, 10, "minimumSaturation");
    let targetSaturation = opts && 'targetSaturation' in opts ? opts.targetSaturation : 0.5;
    if (targetSaturation == null) dart.nullFailed(I[0], 385, 10, "targetSaturation");
    let maximumSaturation = opts && 'maximumSaturation' in opts ? opts.maximumSaturation : 1;
    if (maximumSaturation == null) dart.nullFailed(I[0], 386, 10, "maximumSaturation");
    let minimumLightness = opts && 'minimumLightness' in opts ? opts.minimumLightness : 0;
    if (minimumLightness == null) dart.nullFailed(I[0], 387, 10, "minimumLightness");
    let targetLightness = opts && 'targetLightness' in opts ? opts.targetLightness : 0.5;
    if (targetLightness == null) dart.nullFailed(I[0], 388, 10, "targetLightness");
    let maximumLightness = opts && 'maximumLightness' in opts ? opts.maximumLightness : 1;
    if (maximumLightness == null) dart.nullFailed(I[0], 389, 10, "maximumLightness");
    let isExclusive = opts && 'isExclusive' in opts ? opts.isExclusive : true;
    if (isExclusive == null) dart.nullFailed(I[0], 390, 10, "isExclusive");
    this[saturationWeight] = 0.24;
    this[lightnessWeight] = 0.52;
    this[populationWeight] = 0.24;
    this[minimumSaturation$] = minimumSaturation;
    this[targetSaturation$] = targetSaturation;
    this[maximumSaturation$] = maximumSaturation;
    this[minimumLightness$] = minimumLightness;
    this[targetLightness$] = targetLightness;
    this[maximumLightness$] = maximumLightness;
    this[isExclusive$] = isExclusive;
    ;
  }).prototype = palette_generator.PaletteTarget.prototype;
  dart.addTypeTests(palette_generator.PaletteTarget);
  dart.addTypeCaches(palette_generator.PaletteTarget);
  dart.setMethodSignature(palette_generator.PaletteTarget, () => ({
    __proto__: dart.getMethods(palette_generator.PaletteTarget.__proto__),
    [_normalizeWeights]: dart.fnType(dart.void, []),
    _equals: dart.fnType(core.bool, [dart.dynamic]),
    [$_equals]: dart.fnType(core.bool, [dart.dynamic])
  }));
  dart.setLibraryUri(palette_generator.PaletteTarget, I[1]);
  dart.setFieldSignature(palette_generator.PaletteTarget, () => ({
    __proto__: dart.getFields(palette_generator.PaletteTarget.__proto__),
    minimumSaturation: dart.finalFieldType(core.double),
    targetSaturation: dart.finalFieldType(core.double),
    maximumSaturation: dart.finalFieldType(core.double),
    minimumLightness: dart.finalFieldType(core.double),
    targetLightness: dart.finalFieldType(core.double),
    maximumLightness: dart.finalFieldType(core.double),
    isExclusive: dart.finalFieldType(core.bool),
    saturationWeight: dart.fieldType(core.double),
    lightnessWeight: dart.fieldType(core.double),
    populationWeight: dart.fieldType(core.double)
  }));
  dart.defineExtensionMethods(palette_generator.PaletteTarget, ['_equals']);
  dart.defineExtensionAccessors(palette_generator.PaletteTarget, ['hashCode']);
  dart.defineLazy(palette_generator.PaletteTarget, {
    /*palette_generator.PaletteTarget._targetDarkLightness*/get _targetDarkLightness() {
      return 0.26;
    },
    /*palette_generator.PaletteTarget._maxDarkLightness*/get _maxDarkLightness() {
      return 0.45;
    },
    /*palette_generator.PaletteTarget._minLightLightness*/get _minLightLightness() {
      return 0.55;
    },
    /*palette_generator.PaletteTarget._targetLightLightness*/get _targetLightLightness() {
      return 0.74;
    },
    /*palette_generator.PaletteTarget._minNormalLightness*/get _minNormalLightness() {
      return 0.3;
    },
    /*palette_generator.PaletteTarget._targetNormalLightness*/get _targetNormalLightness() {
      return 0.5;
    },
    /*palette_generator.PaletteTarget._maxNormalLightness*/get _maxNormalLightness() {
      return 0.7;
    },
    /*palette_generator.PaletteTarget._targetMutedSaturation*/get _targetMutedSaturation() {
      return 0.3;
    },
    /*palette_generator.PaletteTarget._maxMutedSaturation*/get _maxMutedSaturation() {
      return 0.4;
    },
    /*palette_generator.PaletteTarget._targetVibrantSaturation*/get _targetVibrantSaturation() {
      return 1;
    },
    /*palette_generator.PaletteTarget._minVibrantSaturation*/get _minVibrantSaturation() {
      return 0.35;
    },
    /*palette_generator.PaletteTarget._weightSaturation*/get _weightSaturation() {
      return 0.24;
    },
    /*palette_generator.PaletteTarget._weightLightness*/get _weightLightness() {
      return 0.52;
    },
    /*palette_generator.PaletteTarget._weightPopulation*/get _weightPopulation() {
      return 0.24;
    },
    /*palette_generator.PaletteTarget.lightVibrant*/get lightVibrant() {
      return new palette_generator.PaletteTarget.new({targetLightness: 0.74, minimumLightness: 0.55, minimumSaturation: 0.35, targetSaturation: 1});
    },
    /*palette_generator.PaletteTarget.vibrant*/get vibrant() {
      return new palette_generator.PaletteTarget.new({minimumLightness: 0.3, targetLightness: 0.5, maximumLightness: 0.7, minimumSaturation: 0.35, targetSaturation: 1});
    },
    /*palette_generator.PaletteTarget.darkVibrant*/get darkVibrant() {
      return new palette_generator.PaletteTarget.new({targetLightness: 0.26, maximumLightness: 0.45, minimumSaturation: 0.35, targetSaturation: 1});
    },
    /*palette_generator.PaletteTarget.lightMuted*/get lightMuted() {
      return new palette_generator.PaletteTarget.new({targetLightness: 0.74, minimumLightness: 0.55, targetSaturation: 0.3, maximumSaturation: 0.4});
    },
    /*palette_generator.PaletteTarget.muted*/get muted() {
      return new palette_generator.PaletteTarget.new({minimumLightness: 0.3, targetLightness: 0.5, maximumLightness: 0.7, targetSaturation: 0.3, maximumSaturation: 0.4});
    },
    /*palette_generator.PaletteTarget.darkMuted*/get darkMuted() {
      return new palette_generator.PaletteTarget.new({targetLightness: 0.26, maximumLightness: 0.45, targetSaturation: 0.3, maximumSaturation: 0.4});
    },
    /*palette_generator.PaletteTarget.baseTargets*/get baseTargets() {
      return T.JSArrayOfPaletteTarget().of([palette_generator.PaletteTarget.lightVibrant, palette_generator.PaletteTarget.vibrant, palette_generator.PaletteTarget.darkVibrant, palette_generator.PaletteTarget.lightMuted, palette_generator.PaletteTarget.muted, palette_generator.PaletteTarget.darkMuted]);
    }
  }, false);
  var color$ = dart.privateName(palette_generator, "PaletteColor.color");
  var population$ = dart.privateName(palette_generator, "PaletteColor.population");
  var _titleTextColor = dart.privateName(palette_generator, "_titleTextColor");
  var _bodyTextColor = dart.privateName(palette_generator, "_bodyTextColor");
  var _ensureTextColorsGenerated = dart.privateName(palette_generator, "_ensureTextColorsGenerated");
  var Color_value = dart.privateName(ui, "Color.value");
  const Object_Diagnosticable$36$0 = class Object_Diagnosticable extends core.Object {};
  (Object_Diagnosticable$36$0.new = function() {
  }).prototype = Object_Diagnosticable$36$0.prototype;
  dart.applyMixin(Object_Diagnosticable$36$0, diagnostics.Diagnosticable);
  palette_generator.PaletteColor = class PaletteColor extends Object_Diagnosticable$36$0 {
    get color() {
      return this[color$];
    }
    set color(value) {
      super.color = value;
    }
    get population() {
      return this[population$];
    }
    set population(value) {
      super.population = value;
    }
    get titleTextColor() {
      if (this[_titleTextColor] == null) {
        this[_ensureTextColorsGenerated]();
      }
      return dart.nullCheck(this[_titleTextColor]);
    }
    get bodyTextColor() {
      if (this[_bodyTextColor] == null) {
        this[_ensureTextColorsGenerated]();
      }
      return dart.nullCheck(this[_bodyTextColor]);
    }
    [_ensureTextColorsGenerated]() {
      let t4, t4$;
      if (this[_titleTextColor] == null || this[_bodyTextColor] == null) {
        let white = C[4] || CT.C4;
        let black = C[5] || CT.C5;
        let lightBodyAlpha = palette_generator.PaletteColor._calculateMinimumAlpha(white, this.color, 4.5);
        let lightTitleAlpha = palette_generator.PaletteColor._calculateMinimumAlpha(white, this.color, 3);
        if (lightBodyAlpha != null && lightTitleAlpha != null) {
          this[_bodyTextColor] = white.withAlpha(lightBodyAlpha);
          this[_titleTextColor] = white.withAlpha(lightTitleAlpha);
          return;
        }
        let darkBodyAlpha = palette_generator.PaletteColor._calculateMinimumAlpha(black, this.color, 4.5);
        let darkTitleAlpha = palette_generator.PaletteColor._calculateMinimumAlpha(black, this.color, 3);
        if (darkBodyAlpha != null && darkTitleAlpha != null) {
          this[_bodyTextColor] = black.withAlpha(darkBodyAlpha);
          this[_titleTextColor] = black.withAlpha(darkTitleAlpha);
          return;
        }
        this[_bodyTextColor] = lightBodyAlpha != null ? white.withAlpha(lightBodyAlpha) : black.withAlpha((t4 = darkBodyAlpha, t4 == null ? 255 : t4));
        this[_titleTextColor] = lightTitleAlpha != null ? white.withAlpha(lightTitleAlpha) : black.withAlpha((t4$ = darkTitleAlpha, t4$ == null ? 255 : t4$));
      }
    }
    static _calculateContrast(foreground, background) {
      if (foreground == null) dart.nullFailed(I[0], 679, 42, "foreground");
      if (background == null) dart.nullFailed(I[0], 679, 60, "background");
      if (!(background.alpha === 255)) dart.assertFailed("background can not be translucent: " + dart.str(background) + ".", I[0], 680, 12, "background.alpha == 0xff");
      if (dart.notNull(foreground.alpha) < 255) {
        foreground = ui.Color.alphaBlend(foreground, background);
      }
      let lightness1 = dart.notNull(foreground.computeLuminance()) + 0.05;
      let lightness2 = dart.notNull(background.computeLuminance()) + 0.05;
      return math.max(core.double, lightness1, lightness2) / math.min(core.num, lightness1, lightness2);
    }
    static _calculateMinimumAlpha(foreground, background, minContrastRatio) {
      if (foreground == null) dart.nullFailed(I[0], 701, 13, "foreground");
      if (background == null) dart.nullFailed(I[0], 701, 31, "background");
      if (minContrastRatio == null) dart.nullFailed(I[0], 701, 50, "minContrastRatio");
      if (!(background.alpha === 255)) dart.assertFailed("The background cannot be translucent: " + dart.str(background) + ".", I[0], 702, 12, "background.alpha == 0xff");
      function contrastCalculator(fg, bg, alpha) {
        if (fg == null) dart.nullFailed(I[0], 704, 37, "fg");
        if (bg == null) dart.nullFailed(I[0], 704, 47, "bg");
        if (alpha == null) dart.nullFailed(I[0], 704, 55, "alpha");
        let testForeground = fg.withAlpha(alpha);
        return palette_generator.PaletteColor._calculateContrast(testForeground, bg);
      }
      dart.fn(contrastCalculator, T.ColorAndColorAndintTodouble());
      let testRatio = contrastCalculator(foreground, background, 255);
      if (dart.notNull(testRatio) < dart.notNull(minContrastRatio)) {
        return null;
      }
      foreground = foreground.withAlpha(255);
      return palette_generator.PaletteColor._binaryAlphaSearch(foreground, background, minContrastRatio, contrastCalculator);
    }
    static _binaryAlphaSearch(foreground, background, minContrastRatio, calculator) {
      if (foreground == null) dart.nullFailed(I[0], 727, 11, "foreground");
      if (background == null) dart.nullFailed(I[0], 728, 11, "background");
      if (minContrastRatio == null) dart.nullFailed(I[0], 729, 12, "minContrastRatio");
      if (calculator == null) dart.nullFailed(I[0], 730, 25, "calculator");
      if (!(background.alpha === 255)) dart.assertFailed("The background cannot be translucent: " + dart.str(background) + ".", I[0], 732, 12, "background.alpha == 0xff");
      let numIterations = 0;
      let minAlpha = 0;
      let maxAlpha = 255;
      while (numIterations <= 10 && maxAlpha - minAlpha > 1) {
        let testAlpha = ((minAlpha + maxAlpha) / 2)[$truncate]();
        let testRatio = calculator(foreground, background, testAlpha);
        if (dart.notNull(testRatio) < dart.notNull(minContrastRatio)) {
          minAlpha = testAlpha;
        } else {
          maxAlpha = testAlpha;
        }
        numIterations = numIterations + 1;
      }
      return maxAlpha;
    }
    debugFillProperties(properties) {
      if (properties == null) dart.nullFailed(I[0], 759, 56, "properties");
      super.debugFillProperties(properties);
      properties.add(new (T.DiagnosticsPropertyOfColor()).new("color", this.color));
      properties.add(new (T.DiagnosticsPropertyOfColor()).new("titleTextColor", this.titleTextColor));
      properties.add(new (T.DiagnosticsPropertyOfColor()).new("bodyTextColor", this.bodyTextColor));
      properties.add(new diagnostics.IntProperty.new("population", this.population, {defaultValue: 0}));
    }
    get hashCode() {
      return ui.hashValues(this.color, this.population);
    }
    _equals(other) {
      if (other == null) return false;
      return dart.equals(this.color, dart.dload(other, 'color')) && core.identical(this.population, dart.dload(other, 'population'));
    }
  };
  (palette_generator.PaletteColor.new = function(color, population) {
    if (color == null) dart.nullFailed(I[0], 603, 21, "color");
    if (population == null) dart.nullFailed(I[0], 603, 33, "population");
    this[_titleTextColor] = null;
    this[_bodyTextColor] = null;
    this[color$] = color;
    this[population$] = population;
    ;
  }).prototype = palette_generator.PaletteColor.prototype;
  dart.addTypeTests(palette_generator.PaletteColor);
  dart.addTypeCaches(palette_generator.PaletteColor);
  dart.setMethodSignature(palette_generator.PaletteColor, () => ({
    __proto__: dart.getMethods(palette_generator.PaletteColor.__proto__),
    [_ensureTextColorsGenerated]: dart.fnType(dart.void, []),
    _equals: dart.fnType(core.bool, [dart.dynamic]),
    [$_equals]: dart.fnType(core.bool, [dart.dynamic])
  }));
  dart.setGetterSignature(palette_generator.PaletteColor, () => ({
    __proto__: dart.getGetters(palette_generator.PaletteColor.__proto__),
    titleTextColor: ui.Color,
    bodyTextColor: ui.Color
  }));
  dart.setLibraryUri(palette_generator.PaletteColor, I[1]);
  dart.setFieldSignature(palette_generator.PaletteColor, () => ({
    __proto__: dart.getFields(palette_generator.PaletteColor.__proto__),
    color: dart.finalFieldType(ui.Color),
    population: dart.finalFieldType(core.int),
    [_titleTextColor]: dart.fieldType(dart.nullable(ui.Color)),
    [_bodyTextColor]: dart.fieldType(dart.nullable(ui.Color))
  }));
  dart.defineExtensionMethods(palette_generator.PaletteColor, ['_equals']);
  dart.defineExtensionAccessors(palette_generator.PaletteColor, ['hashCode']);
  dart.defineLazy(palette_generator.PaletteColor, {
    /*palette_generator.PaletteColor._minContrastTitleText*/get _minContrastTitleText() {
      return 3;
    },
    /*palette_generator.PaletteColor._minContrastBodyText*/get _minContrastBodyText() {
      return 4.5;
    }
  }, false);
  var _name$ = dart.privateName(palette_generator, "_name");
  palette_generator._ColorComponent = class _ColorComponent extends core.Object {
    toString() {
      return this[_name$];
    }
  };
  (palette_generator._ColorComponent.new = function(index, _name) {
    if (index == null) dart.nullFailed(I[0], 821, 6, "index");
    if (_name == null) dart.nullFailed(I[0], 821, 6, "_name");
    this.index = index;
    this[_name$] = _name;
    ;
  }).prototype = palette_generator._ColorComponent.prototype;
  dart.addTypeTests(palette_generator._ColorComponent);
  dart.addTypeCaches(palette_generator._ColorComponent);
  dart.setLibraryUri(palette_generator._ColorComponent, I[1]);
  dart.setFieldSignature(palette_generator._ColorComponent, () => ({
    __proto__: dart.getFields(palette_generator._ColorComponent.__proto__),
    index: dart.finalFieldType(core.int),
    [_name$]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(palette_generator._ColorComponent, ['toString']);
  palette_generator._ColorComponent.red = C[6] || CT.C6;
  palette_generator._ColorComponent.green = C[7] || CT.C7;
  palette_generator._ColorComponent.blue = C[8] || CT.C8;
  palette_generator._ColorComponent.values = C[9] || CT.C9;
  var ___ColorVolumeBox__population = dart.privateName(palette_generator, "_#_ColorVolumeBox#_population");
  var ___ColorVolumeBox__minRed = dart.privateName(palette_generator, "_#_ColorVolumeBox#_minRed");
  var ___ColorVolumeBox__maxRed = dart.privateName(palette_generator, "_#_ColorVolumeBox#_maxRed");
  var ___ColorVolumeBox__minGreen = dart.privateName(palette_generator, "_#_ColorVolumeBox#_minGreen");
  var ___ColorVolumeBox__maxGreen = dart.privateName(palette_generator, "_#_ColorVolumeBox#_maxGreen");
  var ___ColorVolumeBox__minBlue = dart.privateName(palette_generator, "_#_ColorVolumeBox#_minBlue");
  var ___ColorVolumeBox__maxBlue = dart.privateName(palette_generator, "_#_ColorVolumeBox#_maxBlue");
  var _lowerIndex$ = dart.privateName(palette_generator, "_lowerIndex");
  var _upperIndex$ = dart.privateName(palette_generator, "_upperIndex");
  var _fitMinimumBox = dart.privateName(palette_generator, "_fitMinimumBox");
  var _population = dart.privateName(palette_generator, "_population");
  var _minRed = dart.privateName(palette_generator, "_minRed");
  var _maxRed = dart.privateName(palette_generator, "_maxRed");
  var _minGreen = dart.privateName(palette_generator, "_minGreen");
  var _maxGreen = dart.privateName(palette_generator, "_maxGreen");
  var _minBlue = dart.privateName(palette_generator, "_minBlue");
  var _maxBlue = dart.privateName(palette_generator, "_maxBlue");
  var _findSplitPoint = dart.privateName(palette_generator, "_findSplitPoint");
  var _getLongestColorDimension = dart.privateName(palette_generator, "_getLongestColorDimension");
  palette_generator._ColorVolumeBox = class _ColorVolumeBox extends core.Object {
    get [_population]() {
      let t4;
      t4 = this[___ColorVolumeBox__population];
      return t4 == null ? dart.throw(new _internal.LateError.fieldNI("_population")) : t4;
    }
    set [_population](t4) {
      if (t4 == null) dart.nullFailed(I[0], 842, 12, "null");
      this[___ColorVolumeBox__population] = t4;
    }
    get [_minRed]() {
      let t5;
      t5 = this[___ColorVolumeBox__minRed];
      return t5 == null ? dart.throw(new _internal.LateError.fieldNI("_minRed")) : t5;
    }
    set [_minRed](t5) {
      if (t5 == null) dart.nullFailed(I[0], 845, 12, "null");
      this[___ColorVolumeBox__minRed] = t5;
    }
    get [_maxRed]() {
      let t6;
      t6 = this[___ColorVolumeBox__maxRed];
      return t6 == null ? dart.throw(new _internal.LateError.fieldNI("_maxRed")) : t6;
    }
    set [_maxRed](t6) {
      if (t6 == null) dart.nullFailed(I[0], 846, 12, "null");
      this[___ColorVolumeBox__maxRed] = t6;
    }
    get [_minGreen]() {
      let t7;
      t7 = this[___ColorVolumeBox__minGreen];
      return t7 == null ? dart.throw(new _internal.LateError.fieldNI("_minGreen")) : t7;
    }
    set [_minGreen](t7) {
      if (t7 == null) dart.nullFailed(I[0], 847, 12, "null");
      this[___ColorVolumeBox__minGreen] = t7;
    }
    get [_maxGreen]() {
      let t8;
      t8 = this[___ColorVolumeBox__maxGreen];
      return t8 == null ? dart.throw(new _internal.LateError.fieldNI("_maxGreen")) : t8;
    }
    set [_maxGreen](t8) {
      if (t8 == null) dart.nullFailed(I[0], 848, 12, "null");
      this[___ColorVolumeBox__maxGreen] = t8;
    }
    get [_minBlue]() {
      let t9;
      t9 = this[___ColorVolumeBox__minBlue];
      return t9 == null ? dart.throw(new _internal.LateError.fieldNI("_minBlue")) : t9;
    }
    set [_minBlue](t9) {
      if (t9 == null) dart.nullFailed(I[0], 849, 12, "null");
      this[___ColorVolumeBox__minBlue] = t9;
    }
    get [_maxBlue]() {
      let t10;
      t10 = this[___ColorVolumeBox__maxBlue];
      return t10 == null ? dart.throw(new _internal.LateError.fieldNI("_maxBlue")) : t10;
    }
    set [_maxBlue](t10) {
      if (t10 == null) dart.nullFailed(I[0], 850, 12, "null");
      this[___ColorVolumeBox__maxBlue] = t10;
    }
    getVolume() {
      return (dart.notNull(this[_maxRed]) - dart.notNull(this[_minRed]) + 1) * (dart.notNull(this[_maxGreen]) - dart.notNull(this[_minGreen]) + 1) * (dart.notNull(this[_maxBlue]) - dart.notNull(this[_minBlue]) + 1);
    }
    canSplit() {
      return dart.notNull(this.getColorCount()) > 1;
    }
    getColorCount() {
      return 1 + dart.notNull(this[_upperIndex$]) - dart.notNull(this[_lowerIndex$]);
    }
    [_fitMinimumBox]() {
      let minRed = 256;
      let minGreen = 256;
      let minBlue = 256;
      let maxRed = -1;
      let maxGreen = -1;
      let maxBlue = -1;
      let count = 0;
      for (let i = this[_lowerIndex$]; dart.notNull(i) <= dart.notNull(this[_upperIndex$]); i = dart.notNull(i) + 1) {
        let color = this.colors[$_get](i);
        count = count + dart.notNull(dart.nullCheck(this.histogram._get(color)).value);
        if (dart.notNull(color.red) > dart.notNull(maxRed)) {
          maxRed = color.red;
        }
        if (dart.notNull(color.red) < dart.notNull(minRed)) {
          minRed = color.red;
        }
        if (dart.notNull(color.green) > dart.notNull(maxGreen)) {
          maxGreen = color.green;
        }
        if (dart.notNull(color.green) < dart.notNull(minGreen)) {
          minGreen = color.green;
        }
        if (dart.notNull(color.blue) > dart.notNull(maxBlue)) {
          maxBlue = color.blue;
        }
        if (dart.notNull(color.blue) < dart.notNull(minBlue)) {
          minBlue = color.blue;
        }
      }
      this[_minRed] = minRed;
      this[_maxRed] = maxRed;
      this[_minGreen] = minGreen;
      this[_maxGreen] = maxGreen;
      this[_minBlue] = minBlue;
      this[_maxBlue] = maxBlue;
      this[_population] = count;
    }
    splitBox() {
      if (!dart.test(this.canSplit())) dart.assertFailed("Can't split a box with only 1 color", I[0], 912, 12, "canSplit()");
      let splitPoint = this[_findSplitPoint]();
      let newBox = new palette_generator._ColorVolumeBox.new(dart.notNull(splitPoint) + 1, this[_upperIndex$], this.histogram, this.colors);
      this[_upperIndex$] = splitPoint;
      this[_fitMinimumBox]();
      return newBox;
    }
    [_getLongestColorDimension]() {
      let redLength = dart.notNull(this[_maxRed]) - dart.notNull(this[_minRed]);
      let greenLength = dart.notNull(this[_maxGreen]) - dart.notNull(this[_minGreen]);
      let blueLength = dart.notNull(this[_maxBlue]) - dart.notNull(this[_minBlue]);
      if (redLength >= greenLength && redLength >= blueLength) {
        return palette_generator._ColorComponent.red;
      } else if (greenLength >= redLength && greenLength >= blueLength) {
        return palette_generator._ColorComponent.green;
      } else {
        return palette_generator._ColorComponent.blue;
      }
    }
    [_findSplitPoint]() {
      let longestDimension = this[_getLongestColorDimension]();
      function compareColors(a, b) {
        if (a == null) dart.nullFailed(I[0], 947, 29, "a");
        if (b == null) dart.nullFailed(I[0], 947, 38, "b");
        function makeValue(first, second, third) {
          if (first == null) dart.nullFailed(I[0], 948, 25, "first");
          if (second == null) dart.nullFailed(I[0], 948, 36, "second");
          if (third == null) dart.nullFailed(I[0], 948, 48, "third");
          return (dart.notNull(first) << 16 | dart.notNull(second) << 8 >>> 0 | dart.notNull(third)) >>> 0;
        }
        dart.fn(makeValue, T.intAndintAndintToint());
        switch (longestDimension) {
          case C[6] || CT.C6:
          {
            let aValue = makeValue(a.red, a.green, a.blue);
            let bValue = makeValue(b.red, b.green, b.blue);
            return aValue[$compareTo](bValue);
          }
          case C[7] || CT.C7:
          {
            let aValue = makeValue(a.green, a.red, a.blue);
            let bValue = makeValue(b.green, b.red, b.blue);
            return aValue[$compareTo](bValue);
          }
          case C[8] || CT.C8:
          {
            let aValue = makeValue(a.blue, a.green, a.red);
            let bValue = makeValue(b.blue, b.green, b.red);
            return aValue[$compareTo](bValue);
          }
        }
      }
      dart.fn(compareColors, T.ColorAndColorToint());
      let colorSubset = this.colors[$sublist](this[_lowerIndex$], dart.notNull(this[_upperIndex$]) + 1);
      colorSubset[$sort](compareColors);
      this.colors[$replaceRange](this[_lowerIndex$], dart.notNull(this[_upperIndex$]) + 1, colorSubset);
      let median = (dart.notNull(this[_population]) / 2)[$round]();
      for (let i = 0, count = 0; i <= dart.notNull(colorSubset[$length]); i = i + 1) {
        count = count + dart.notNull(dart.nullCheck(this.histogram._get(colorSubset[$_get](i))).value);
        if (count >= median) {
          return math.min(core.int, dart.notNull(this[_upperIndex$]) - 1, i + dart.notNull(this[_lowerIndex$]));
        }
      }
      return this[_lowerIndex$];
    }
    getAverageColor() {
      let redSum = 0;
      let greenSum = 0;
      let blueSum = 0;
      let totalPopulation = 0;
      for (let i = this[_lowerIndex$]; dart.notNull(i) <= dart.notNull(this[_upperIndex$]); i = dart.notNull(i) + 1) {
        let color = this.colors[$_get](i);
        let colorPopulation = dart.nullCheck(this.histogram._get(color)).value;
        totalPopulation = totalPopulation + dart.notNull(colorPopulation);
        redSum = redSum + dart.notNull(colorPopulation) * dart.notNull(color.red);
        greenSum = greenSum + dart.notNull(colorPopulation) * dart.notNull(color.green);
        blueSum = blueSum + dart.notNull(colorPopulation) * dart.notNull(color.blue);
      }
      let redMean = (redSum / totalPopulation)[$round]();
      let greenMean = (greenSum / totalPopulation)[$round]();
      let blueMean = (blueSum / totalPopulation)[$round]();
      return new palette_generator.PaletteColor.new(new ui.Color.fromARGB(255, redMean, greenMean, blueMean), totalPopulation);
    }
  };
  (palette_generator._ColorVolumeBox.new = function(_lowerIndex, _upperIndex, histogram, colors) {
    if (_lowerIndex == null) dart.nullFailed(I[0], 830, 12, "_lowerIndex");
    if (_upperIndex == null) dart.nullFailed(I[0], 830, 30, "_upperIndex");
    if (histogram == null) dart.nullFailed(I[0], 830, 48, "histogram");
    if (colors == null) dart.nullFailed(I[0], 830, 64, "colors");
    this[___ColorVolumeBox__population] = null;
    this[___ColorVolumeBox__minRed] = null;
    this[___ColorVolumeBox__maxRed] = null;
    this[___ColorVolumeBox__minGreen] = null;
    this[___ColorVolumeBox__maxGreen] = null;
    this[___ColorVolumeBox__minBlue] = null;
    this[___ColorVolumeBox__maxBlue] = null;
    this[_lowerIndex$] = _lowerIndex;
    this[_upperIndex$] = _upperIndex;
    this.histogram = histogram;
    this.colors = colors;
    this[_fitMinimumBox]();
  }).prototype = palette_generator._ColorVolumeBox.prototype;
  dart.addTypeTests(palette_generator._ColorVolumeBox);
  dart.addTypeCaches(palette_generator._ColorVolumeBox);
  dart.setMethodSignature(palette_generator._ColorVolumeBox, () => ({
    __proto__: dart.getMethods(palette_generator._ColorVolumeBox.__proto__),
    getVolume: dart.fnType(core.int, []),
    canSplit: dart.fnType(core.bool, []),
    getColorCount: dart.fnType(core.int, []),
    [_fitMinimumBox]: dart.fnType(dart.void, []),
    splitBox: dart.fnType(palette_generator._ColorVolumeBox, []),
    [_getLongestColorDimension]: dart.fnType(palette_generator._ColorComponent, []),
    [_findSplitPoint]: dart.fnType(core.int, []),
    getAverageColor: dart.fnType(palette_generator.PaletteColor, [])
  }));
  dart.setGetterSignature(palette_generator._ColorVolumeBox, () => ({
    __proto__: dart.getGetters(palette_generator._ColorVolumeBox.__proto__),
    [_population]: core.int,
    [_minRed]: core.int,
    [_maxRed]: core.int,
    [_minGreen]: core.int,
    [_maxGreen]: core.int,
    [_minBlue]: core.int,
    [_maxBlue]: core.int
  }));
  dart.setSetterSignature(palette_generator._ColorVolumeBox, () => ({
    __proto__: dart.getSetters(palette_generator._ColorVolumeBox.__proto__),
    [_population]: core.int,
    [_minRed]: core.int,
    [_maxRed]: core.int,
    [_minGreen]: core.int,
    [_maxGreen]: core.int,
    [_minBlue]: core.int,
    [_maxBlue]: core.int
  }));
  dart.setLibraryUri(palette_generator._ColorVolumeBox, I[1]);
  dart.setFieldSignature(palette_generator._ColorVolumeBox, () => ({
    __proto__: dart.getFields(palette_generator._ColorVolumeBox.__proto__),
    histogram: dart.finalFieldType(palette_generator._ColorHistogram),
    colors: dart.finalFieldType(core.List$(ui.Color)),
    [_lowerIndex$]: dart.finalFieldType(core.int),
    [_upperIndex$]: dart.fieldType(core.int),
    [___ColorVolumeBox__population]: dart.fieldType(dart.nullable(core.int)),
    [___ColorVolumeBox__minRed]: dart.fieldType(dart.nullable(core.int)),
    [___ColorVolumeBox__maxRed]: dart.fieldType(dart.nullable(core.int)),
    [___ColorVolumeBox__minGreen]: dart.fieldType(dart.nullable(core.int)),
    [___ColorVolumeBox__maxGreen]: dart.fieldType(dart.nullable(core.int)),
    [___ColorVolumeBox__minBlue]: dart.fieldType(dart.nullable(core.int)),
    [___ColorVolumeBox__maxBlue]: dart.fieldType(dart.nullable(core.int))
  }));
  palette_generator._ColorCount = class _ColorCount extends core.Object {};
  (palette_generator._ColorCount.new = function() {
    this.value = 0;
    ;
  }).prototype = palette_generator._ColorCount.prototype;
  dart.addTypeTests(palette_generator._ColorCount);
  dart.addTypeCaches(palette_generator._ColorCount);
  dart.setLibraryUri(palette_generator._ColorCount, I[1]);
  dart.setFieldSignature(palette_generator._ColorCount, () => ({
    __proto__: dart.getFields(palette_generator._ColorCount.__proto__),
    value: dart.fieldType(core.int)
  }));
  var _hist = dart.privateName(palette_generator, "_hist");
  var _keys = dart.privateName(palette_generator, "_keys");
  palette_generator._ColorHistogram = class _ColorHistogram extends core.Object {
    _get(color) {
      if (color == null) dart.nullFailed(I[0], 1021, 34, "color");
      let redMap = this[_hist][$_get](color.red);
      if (redMap == null) {
        return null;
      }
      let blueMap = redMap[$_get](color.blue);
      if (blueMap == null) {
        return null;
      }
      return blueMap[$_get](color.green);
    }
    _set(key, value$) {
      let value = value$;
      if (key == null) dart.nullFailed(I[0], 1033, 27, "key");
      if (value == null) dart.nullFailed(I[0], 1033, 44, "value");
      let red = key.red;
      let blue = key.blue;
      let green = key.green;
      let newColor = false;
      let redMap = this[_hist][$_get](red);
      if (redMap == null) {
        this[_hist][$_set](red, redMap = new (T.IdentityMapOfint$MapOfint$_ColorCount()).new());
        newColor = true;
      }
      let blueMap = redMap[$_get](blue);
      if (blueMap == null) {
        redMap[$_set](blue, blueMap = new (T.IdentityMapOfint$_ColorCount()).new());
        newColor = true;
      }
      if (blueMap[$_get](green) == null) {
        newColor = true;
      }
      blueMap[$_set](green, value);
      if (newColor) {
        this[_keys].add(key);
      }
      return value$;
    }
    removeWhere(predicate) {
      let t12, t11;
      if (predicate == null) dart.nullFailed(I[0], 1062, 25, "predicate");
      for (let key of this[_keys]) {
        if (dart.test(predicate(key))) {
          t11 = this[_hist][$_get](key.red);
          t11 == null ? null : (t12 = t11[$_get](key.blue), t12 == null ? null : t12[$remove](key.green));
        }
      }
      this[_keys].removeWhere(dart.fn(color => {
        if (color == null) dart.nullFailed(I[0], 1068, 30, "color");
        return predicate(color);
      }, T.ColorTobool()));
    }
    get keys() {
      return this[_keys];
    }
    get length() {
      return this[_keys].length;
    }
  };
  (palette_generator._ColorHistogram.new = function() {
    this[_hist] = new (T.IdentityMapOfint$MapOfint$MapOfint$_ColorCount()).new();
    this[_keys] = new (T.DoubleLinkedQueueOfColor()).new();
    ;
  }).prototype = palette_generator._ColorHistogram.prototype;
  dart.addTypeTests(palette_generator._ColorHistogram);
  dart.addTypeCaches(palette_generator._ColorHistogram);
  dart.setMethodSignature(palette_generator._ColorHistogram, () => ({
    __proto__: dart.getMethods(palette_generator._ColorHistogram.__proto__),
    _get: dart.fnType(dart.nullable(palette_generator._ColorCount), [ui.Color]),
    _set: dart.fnType(dart.void, [ui.Color, palette_generator._ColorCount]),
    removeWhere: dart.fnType(dart.void, [dart.fnType(core.bool, [ui.Color])])
  }));
  dart.setGetterSignature(palette_generator._ColorHistogram, () => ({
    __proto__: dart.getGetters(palette_generator._ColorHistogram.__proto__),
    keys: core.Iterable$(ui.Color),
    length: core.int
  }));
  dart.setLibraryUri(palette_generator._ColorHistogram, I[1]);
  dart.setFieldSignature(palette_generator._ColorHistogram, () => ({
    __proto__: dart.getFields(palette_generator._ColorHistogram.__proto__),
    [_hist]: dart.finalFieldType(core.Map$(core.int, core.Map$(core.int, core.Map$(core.int, palette_generator._ColorCount)))),
    [_keys]: dart.finalFieldType(collection.DoubleLinkedQueue$(ui.Color))
  }));
  var _paletteColors = dart.privateName(palette_generator, "_paletteColors");
  var _quantizeColors = dart.privateName(palette_generator, "_quantizeColors");
  var _getImagePixels = dart.privateName(palette_generator, "_getImagePixels");
  var _shouldIgnoreColor = dart.privateName(palette_generator, "_shouldIgnoreColor");
  var _quantizePixels = dart.privateName(palette_generator, "_quantizePixels");
  var _splitBoxes = dart.privateName(palette_generator, "_splitBoxes");
  var _generateAverageColors = dart.privateName(palette_generator, "_generateAverageColors");
  palette_generator._ColorCutQuantizer = class _ColorCutQuantizer extends core.Object {
    get quantizedColors() {
      return async.async(T.ListOfPaletteColor(), (function* quantizedColors() {
        if (dart.test(this[_paletteColors][$isNotEmpty])) {
          return this[_paletteColors];
        } else {
          return this[_quantizeColors](this.image);
        }
      }).bind(this));
    }
    [_getImagePixels](pixels, width, height, opts) {
      if (pixels == null) dart.nullFailed(I[0], 1104, 44, "pixels");
      if (width == null) dart.nullFailed(I[0], 1104, 56, "width");
      if (height == null) dart.nullFailed(I[0], 1104, 67, "height");
      let region = opts && 'region' in opts ? opts.region : null;
      return new (T.SyncIterableOfColor()).new(function* _getImagePixels() {
        let rowStride = dart.notNull(width) * 4;
        let rowStart = null;
        let rowEnd = null;
        let colStart = null;
        let colEnd = null;
        if (region != null) {
          rowStart = region.top[$floor]();
          rowEnd = region.bottom[$floor]();
          colStart = region.left[$floor]();
          colEnd = region.right[$floor]();
          if (!(dart.notNull(rowStart) >= 0)) dart.assertFailed(null, I[0], 1116, 14, "rowStart >= 0");
          if (!(dart.notNull(rowEnd) <= dart.notNull(height))) dart.assertFailed(null, I[0], 1117, 14, "rowEnd <= height");
          if (!(dart.notNull(colStart) >= 0)) dart.assertFailed(null, I[0], 1118, 14, "colStart >= 0");
          if (!(dart.notNull(colEnd) <= dart.notNull(width))) dart.assertFailed(null, I[0], 1119, 14, "colEnd <= width");
        } else {
          rowStart = 0;
          rowEnd = height;
          colStart = 0;
          colEnd = width;
        }
        let byteCount = 0;
        for (let row = rowStart; dart.notNull(row) < dart.notNull(rowEnd); row = dart.notNull(row) + 1) {
          for (let col = colStart; dart.notNull(col) < dart.notNull(colEnd); col = dart.notNull(col) + 1) {
            let position = dart.notNull(row) * rowStride + dart.notNull(col) * 4;
            let pixel = pixels[$getUint32](position);
            let result = new ui.Color.new((dart.notNull(pixel) << 24 | pixel[$rightShift](8)) >>> 0);
            byteCount = byteCount + 4;
            yield result;
          }
        }
        if (!(byteCount === (dart.notNull(rowEnd) - dart.notNull(rowStart)) * (dart.notNull(colEnd) - dart.notNull(colStart)) * 4)) dart.assertFailed(null, I[0], 1137, 12, "byteCount == ((rowEnd - rowStart) * (colEnd - colStart) * 4)");
      });
    }
    [_shouldIgnoreColor](color) {
      if (color == null) dart.nullFailed(I[0], 1140, 33, "color");
      let hslColor = colors.HSLColor.fromColor(color);
      if (dart.test(this.filters[$isNotEmpty])) {
        for (let filter of this.filters) {
          if (!dart.test(filter(hslColor))) {
            return true;
          }
        }
      }
      return false;
    }
    [_quantizeColors](image) {
      if (image == null) dart.nullFailed(I[0], 1152, 55, "image");
      return async.async(T.ListOfPaletteColor(), (function* _quantizeColors() {
        function quantizeColor(color) {
          if (color == null) dart.nullFailed(I[0], 1159, 31, "color");
          return new ui.Color.fromARGB(color.alpha, (dart.notNull(color.red) & 248) >>> 0, (dart.notNull(color.green) & 248) >>> 0, (dart.notNull(color.blue) & 248) >>> 0);
        }
        dart.fn(quantizeColor, T.ColorToColor());
        let imageData = (yield image.toByteData({format: ui.ImageByteFormat.rawRgba}));
        if (imageData == null) {
          dart.throw("Failed to encode the image.");
        }
        let pixels = this[_getImagePixels](imageData, image.width, image.height, {region: this.region});
        let hist = new palette_generator._ColorHistogram.new();
        let currentColor = null;
        let currentColorCount = null;
        for (let pixel of pixels) {
          let quantizedColor = quantizeColor(pixel);
          let colorKey = quantizedColor.withAlpha(255);
          if (quantizedColor.alpha === 0) {
            continue;
          }
          if (!dart.equals(currentColor, colorKey)) {
            currentColor = colorKey;
            currentColorCount = hist._get(colorKey);
            if (currentColorCount == null) {
              hist._set(colorKey, currentColorCount = new palette_generator._ColorCount.new());
            }
          }
          dart.nullCheck(currentColorCount).value = dart.notNull(currentColorCount.value) + 1;
        }
        hist.removeWhere(dart.fn(color => {
          if (color == null) dart.nullFailed(I[0], 1199, 29, "color");
          return this[_shouldIgnoreColor](color);
        }, T.ColorTobool()));
        if (dart.notNull(hist.length) <= dart.notNull(this.maxColors)) {
          this[_paletteColors][$clear]();
          for (let color of hist.keys) {
            this[_paletteColors][$add](new palette_generator.PaletteColor.new(color, dart.nullCheck(hist._get(color)).value));
          }
        } else {
          this[_paletteColors][$clear]();
          this[_paletteColors][$addAll](this[_quantizePixels](this.maxColors, hist));
        }
        return this[_paletteColors];
      }).bind(this));
    }
    [_quantizePixels](maxColors, histogram) {
      if (maxColors == null) dart.nullFailed(I[0], 1218, 9, "maxColors");
      if (histogram == null) dart.nullFailed(I[0], 1219, 21, "histogram");
      function volumeComparator(a, b) {
        if (a == null) dart.nullFailed(I[0], 1221, 42, "a");
        if (b == null) dart.nullFailed(I[0], 1221, 61, "b");
        return b.getVolume()[$compareTo](a.getVolume());
      }
      dart.fn(volumeComparator, T._ColorVolumeBoxAnd_ColorVolumeBoxToint());
      let priorityQueue = new (T.HeapPriorityQueueOf_ColorVolumeBox()).new(volumeComparator);
      priorityQueue.add(new palette_generator._ColorVolumeBox.new(0, dart.notNull(histogram.length) - 1, histogram, histogram.keys[$toList]()));
      this[_splitBoxes](priorityQueue, maxColors);
      return this[_generateAverageColors](priorityQueue);
    }
    [_splitBoxes](queue, maxSize) {
      if (queue == null) dart.nullFailed(I[0], 1244, 51, "queue");
      if (maxSize == null) dart.nullFailed(I[0], 1244, 68, "maxSize");
      while (dart.notNull(queue.length) < dart.notNull(maxSize)) {
        let colorVolumeBox = queue.removeFirst();
        if (dart.test(colorVolumeBox.canSplit())) {
          queue.add(colorVolumeBox.splitBox());
          queue.add(colorVolumeBox);
        } else {
          return;
        }
      }
    }
    [_generateAverageColors](colorVolumeBoxes) {
      if (colorVolumeBoxes == null) dart.nullFailed(I[0], 1261, 38, "colorVolumeBoxes");
      let colors = T.JSArrayOfPaletteColor().of([]);
      for (let colorVolumeBox of colorVolumeBoxes.toList()) {
        let paletteColor = colorVolumeBox.getAverageColor();
        if (!dart.test(this[_shouldIgnoreColor](paletteColor.color))) {
          colors[$add](paletteColor);
        }
      }
      return colors;
    }
  };
  (palette_generator._ColorCutQuantizer.new = function(image, opts) {
    if (image == null) dart.nullFailed(I[0], 1082, 10, "image");
    let maxColors = opts && 'maxColors' in opts ? opts.maxColors : 16;
    if (maxColors == null) dart.nullFailed(I[0], 1083, 10, "maxColors");
    let region = opts && 'region' in opts ? opts.region : null;
    let filters = opts && 'filters' in opts ? opts.filters : C[1] || CT.C1;
    if (filters == null) dart.nullFailed(I[0], 1085, 10, "filters");
    this.image = image;
    this.maxColors = maxColors;
    this.region = region;
    this.filters = filters;
    if (!(region == null || !dart.equals(region, ui.Rect.zero))) dart.assertFailed(null, I[0], 1086, 16, "region == null || region != Rect.zero");
    this[_paletteColors] = T.JSArrayOfPaletteColor().of([]);
    ;
  }).prototype = palette_generator._ColorCutQuantizer.prototype;
  dart.addTypeTests(palette_generator._ColorCutQuantizer);
  dart.addTypeCaches(palette_generator._ColorCutQuantizer);
  dart.setMethodSignature(palette_generator._ColorCutQuantizer, () => ({
    __proto__: dart.getMethods(palette_generator._ColorCutQuantizer.__proto__),
    [_getImagePixels]: dart.fnType(core.Iterable$(ui.Color), [typed_data.ByteData, core.int, core.int], {region: dart.nullable(ui.Rect)}, {}),
    [_shouldIgnoreColor]: dart.fnType(core.bool, [ui.Color]),
    [_quantizeColors]: dart.fnType(async.Future$(core.List$(palette_generator.PaletteColor)), [ui.Image]),
    [_quantizePixels]: dart.fnType(core.List$(palette_generator.PaletteColor), [core.int, palette_generator._ColorHistogram]),
    [_splitBoxes]: dart.fnType(dart.void, [priority_queue.PriorityQueue$(palette_generator._ColorVolumeBox), core.int]),
    [_generateAverageColors]: dart.fnType(core.List$(palette_generator.PaletteColor), [priority_queue.PriorityQueue$(palette_generator._ColorVolumeBox)])
  }));
  dart.setGetterSignature(palette_generator._ColorCutQuantizer, () => ({
    __proto__: dart.getGetters(palette_generator._ColorCutQuantizer.__proto__),
    quantizedColors: async.FutureOr$(core.List$(palette_generator.PaletteColor))
  }));
  dart.setLibraryUri(palette_generator._ColorCutQuantizer, I[1]);
  dart.setFieldSignature(palette_generator._ColorCutQuantizer, () => ({
    __proto__: dart.getFields(palette_generator._ColorCutQuantizer.__proto__),
    image: dart.finalFieldType(ui.Image),
    [_paletteColors]: dart.finalFieldType(core.List$(palette_generator.PaletteColor)),
    maxColors: dart.finalFieldType(core.int),
    region: dart.finalFieldType(dart.nullable(ui.Rect)),
    filters: dart.finalFieldType(core.List$(dart.fnType(core.bool, [colors.HSLColor])))
  }));
  palette_generator.avoidRedBlackWhitePaletteFilter = function avoidRedBlackWhitePaletteFilter(color) {
    if (color == null) dart.nullFailed(I[0], 797, 47, "color");
    function _isBlack(hslColor) {
      if (hslColor == null) dart.nullFailed(I[0], 798, 26, "hslColor");
      return dart.notNull(hslColor.lightness) <= 0.05;
    }
    dart.fn(_isBlack, T.HSLColorTobool());
    function _isWhite(hslColor) {
      if (hslColor == null) dart.nullFailed(I[0], 803, 26, "hslColor");
      return dart.notNull(hslColor.lightness) >= 0.95;
    }
    dart.fn(_isWhite, T.HSLColorTobool());
    function _isNearRedILine(hslColor) {
      if (hslColor == null) dart.nullFailed(I[0], 809, 33, "hslColor");
      return dart.notNull(hslColor.hue) >= 10 && dart.notNull(hslColor.hue) <= 37 && dart.notNull(hslColor.saturation) <= 0.82;
    }
    dart.fn(_isNearRedILine, T.HSLColorTobool());
    return !dart.test(_isWhite(color)) && !dart.test(_isBlack(color)) && !dart.test(_isNearRedILine(color));
  };
  dart.trackLibraries("packages/palette_generator/palette_generator.dart", {
    "package:palette_generator/palette_generator.dart": palette_generator
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["palette_generator.dart"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IA4NyC;;;;;;IAId;;;;;;IAMC;;;;;;;UAxIf;UACH;UACF;;UACgB;;UAGA;;AAPmB;AASvC,cAAO,AAAO,AAAQ,MAAT,YAAmB,aAAP,MAAM,EAAS;AACxC,cACI,AAAO,AAAQ,MAAT,YACiB,aAAlB,AAAO,AAAQ,MAAT,gBAAe,OAAyB,aAAlB,AAAO,AAAQ,MAAT,gBAAe,wBACtD,AAAoE,qBAA3D,MAAM,wCAAwB,AAAM,KAAD,UAAO,eAAG,AAAM,KAAD;AAC/D,cACI,AAAO,AAAQ,MAAT,YACqB,aAAtB,AAAO,AAAY,MAAb,iCAAmB,AAAM,KAAD,WACL,aAAtB,AAAO,AAAY,MAAb,iCAAmB,AAAM,KAAD,6BACtC,AAAoE,qBAA3D,MAAM,wCAAwB,AAAM,KAAD,UAAO,eAAG,AAAM,KAAD;AAEtC,wBAAY,6CACnC,KAAK,cACM,iBAAiB,WACnB,OAAO,UACR,MAAM;AAES,sBAAS,MAAM,AAAU,SAAD;AACjD,cAAwB,mDACtB,MAAM,YACG,OAAO;MAEpB;;;UA4BgB;UACR;UACA;UACF;;UACgB;;UAGA;;UACX;;AATsC;AAW/C,cAAO,AAAO,AAAQ,MAAT,YAAY,AAAK,IAAD;AAC7B,cAAO,AAAO,AAAQ,MAAT,YAAmB,aAAP,MAAM,EAAS;AACxC,cACI,AAAO,AAAQ,MAAT,YACiB,aAAlB,AAAO,AAAQ,MAAT,gBAAe,OAAyB,aAAlB,AAAO,AAAQ,MAAT,gBAAe,wBACtD,AAAmE,qBAA1D,MAAM,wCAA4B,AAAE,eAAN,IAAI,WAAQ,eAAG,AAAK,IAAD;AAC9D,cAAO,AAAO,AAAQ,MAAT,sBAAgB,AAAE,eAAN,IAAI,WAAW,AAAO,MAAD,+BAC1C,AAA2C,qBAAlC,MAAM,wCAAuB,IAAI;AAC9C,cACI,AAAO,AAAQ,MAAT,YACqB,aAAtB,AAAO,AAAY,MAAb,iCAAuB,AAAE,eAAN,IAAI,YACJ,aAAtB,AAAO,AAAY,MAAb,iCAAmB,AAAK,IAAD,6BACrC,AAA2C,qBAAlC,MAAM,wCAAuB,IAAI;AAC5B,qBAAS,AAAc,aAAD,SACtC,iDAAyB,IAAI,oBAAoB;AAEzB,6BAAiB;AACpC;AACkB;;;;;;;;;;;;AAKvB,QAJF,eAAW,yCAAoB,SAAW,MAAW;;cAAX;cAAW;AACvB,eAA5B,kBAAkB;uBAAlB,OAAoB;AACW,UAA/B,AAAO,MAAD,gBAAgB;AACa,UAAnC,AAAe,cAAD,UAAU,AAAK,IAAD;;AAG9B,YAAY,aAAR,OAAO,EAAa;AAOpB,UANF,qBAAqB,gBAAM,OAAO,EAAE;AACH,YAA/B,AAAO,MAAD,gBAAgB;AAIrB,YAHD,AAAe,cAAD,eACZ,+BACI,AAAqD,mDAAd,aAAa;;;AAIlC,QAA5B,AAAO,MAAD,aAAa;AACJ,qBAAQ,MAAM,AAAe,cAAD;AAClC,wBAAY,MAAM;AAC3B,YAAI,AAAK,IAAD,YAAY,AAAO,MAAD;AACX,sBAAoB,aAAZ,AAAM,KAAD,uBAAS,AAAK,IAAD;AAMtC,UALD,YAAiB,qBACH,aAAZ,AAAO,MAAD,SAAQ,KAAK,EACR,aAAX,AAAO,MAAD,QAAO,KAAK,EACL,aAAb,AAAO,MAAD,UAAS,KAAK,EACN,aAAd,AAAO,MAAD,WAAU,KAAK;;AAGzB,cAAwB,8CACtB,KAAK,WACG,SAAS,qBACE,iBAAiB,WAC3B,OAAO,WACP,OAAO;MAEpB;;;AAmB2B;AACzB,iBAAkB,eAAgB;AAChC,gBAAM,AAAa,YAAD;;MAEtB;;;AAIkC,YAAA,AAAgB,8BAAe;IAAQ;;AAKrE,YAAA,AAAgB,8BAAe;IAAa;;AAK5C,YAAA,AAAgB,8BAAe;IAAY;;AAIf,YAAA,AAAgB,8BAAe;IAAM;;AAKjE,YAAA,AAAgB,8BAAe;IAAW;;AAIV,YAAA,AAAgB,8BAAe;IAAU;;AAG1C;IAAc;;AAI/C,oBAAI,AAAc;AACK,QAArB,uBAAiB;AACjB;;AAKA,MAFF,AAAc,0BAAK,SAAc,GAAgB;YAAhB;YAAgB;AAC/C,cAAO,AAAE,AAAW,EAAZ,wBAAsB,AAAE,CAAD;;AAEA,MAAjC,uBAAiB,AAAa,0BAAC;IACjC;;AAG2B,uBACrB,sCAAwB,AAAQ,oBAAgB;AACnC,uBAAoB;AACrC,eAAmB,SAAU,WAAU;AACX,QAA1B,AAAO,MAAD;AACc,0BAChB,4BAAsB,MAAM,EAAE,UAAU;AAC5C,YAAI,AAAY,WAAD;AACyB,UAAtC,AAAgB,6BAAC,MAAM,EAAI,WAAW;;;IAG5C;4BAGkB,QAAmB;UAAnB;UAAmB;AACf,2BAChB,mCAA6B,MAAM,EAAE,UAAU;AACnD,UAAI,AAAe,cAAD,sBAAY,AAAO,MAAD;AAGE,QAApC,AAAW,UAAD,KAAK,AAAe,cAAD;;AAE/B,YAAO,eAAc;IACvB;mCAGkB,QAAmB;UAAnB;UAAmB;AAC5B,qBAAW;AACJ;AACd,eAAkB,eAAgB;AAChC,sBAAI,+BAAyB,YAAY,EAAE,MAAM,EAAE,UAAU;AAC9C,sBAAQ,qBAAe,YAAY,EAAE,MAAM;AACxD,cAAI,AAAe,cAAD,YAAkB,aAAN,KAAK,iBAAG,QAAQ;AACf,YAA7B,iBAAiB,YAAY;AACb,YAAhB,WAAW,KAAK;;;;AAItB,YAAO,eAAc;IACvB;+BAGiB,cAA4B,QAAmB;UAA/C;UAA4B;UAAmB;AAG/C,qBAAoB,0BAAU,AAAa,YAAD;AACzD,YAA2B,AAGuB,cAH3C,AAAS,QAAD,6BAAe,AAAO,MAAD,uBACZ,aAApB,AAAS,QAAD,6BAAe,AAAO,MAAD,uBACV,aAAnB,AAAS,QAAD,4BAAc,AAAO,MAAD,sBACT,aAAnB,AAAS,QAAD,4BAAc,AAAO,MAAD,iCAC3B,AAAW,UAAD,UAAU,AAAa,YAAD;IACvC;qBAEmC,cAA4B;UAA5B;UAA4B;AAC9C,qBAAoB,0BAAU,AAAa,YAAD;AAElD,4BAAkB;AAClB,uBAAa;AACb,4BAAkB;AAEzB,UAA4B,aAAxB,AAAO,MAAD,qBAAoB;AAEqC,QADjE,kBAA0C,aAAxB,AAAO,MAAD,sBACnB,AAAI,MAAkD,CAA3B,aAApB,AAAS,QAAD,4BAAc,AAAO,MAAD;;AAE1C,UAA2B,aAAvB,AAAO,MAAD,oBAAmB;AAEoC,QAD/D,aAAoC,aAAvB,AAAO,MAAD,qBACd,AAAI,MAAgD,CAA1B,aAAnB,AAAS,QAAD,2BAAa,AAAO,MAAD;;AAEzC,UAAI,AAAe,gCAAmC,aAAxB,AAAO,MAAD,qBAAoB;AAEI,QAD1D,kBAA0C,aAAxB,AAAO,MAAD,sBACK,aAAxB,AAAa,YAAD,4BAA4B,AAAE,eAAhB;;AAGjC,YAAO,AAAgB,AAAa,gBAAd,GAAG,UAAU,GAAG,eAAe;IACvD;;UAGqD;AACd,MAA/B,0BAAoB,UAAU;AAGA,MAFpC,AAAW,UAAD,KAAK,6CACX,iBAAiB,mCACW;AAEa,MAD7C,AAAW,UAAD,KAAK,8CAAgC,WAAW,6BAC1B;IAClC;;;QA3SO;QACA;;IAuMO;IAxMP;IACA;IACe,yBAA+B;AACpC,IAAf;AACiB,IAAjB;EACF;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MA+IiB,gEAA6B;;;;;;;;;;;;;;;;;;;IAgLjC;;;;;;IAGA;;;;;;IAGA;;;;;;IAGA;;;;;;IAGA;;;;;;IAGA;;;;;;IAOF;;;;;;IAGJ;;;;;;IAGA;;;;;;IAGA;;;;;;;AAuGQ,gBAAuB,AAAkB,aAAnC,sCAAmB,qCAAkB;AACxD,UAAI,AAAI,GAAD,KAAI;AACc,QAAvB,wBAAiB,aAAjB,yBAAoB,GAAG;AACD,QAAtB,uBAAgB,aAAhB,wBAAmB,GAAG;AACC,QAAvB,wBAAiB,aAAjB,yBAAoB,GAAG;;IAE3B;;UAGyB;AACvB,YAAyB,AAOoB,gBAPtC,wBAA2B,WAAN,KAAK,2BACZ,eAAjB,uBAA0B,WAAN,KAAK,0BACP,eAAlB,wBAA2B,WAAN,KAAK,2BACT,eAAjB,uBAA0B,WAAN,KAAK,0BACT,eAAhB,sBAAyB,WAAN,KAAK,yBACP,eAAjB,uBAA0B,WAAN,KAAK,0BACR,eAAjB,uBAA0B,WAAN,KAAK,0BACT,eAAhB,sBAAyB,WAAN,KAAK,yBACP,eAAjB,uBAA0B,WAAN,KAAK;IAC/B;;AAIE,YAAO,eACL,wBACA,uBACA,wBACA,uBACA,sBACA,uBACA,uBACA,sBACA;IAEJ;;UAGqD;AACd,MAA/B,0BAAoB,UAAU;AAChB,0BAAgB;AAEe,MADnD,AAAW,UAAD,KAAK,mCAAe,qBAAqB,uCACjC,AAAc,aAAD;AAEmB,MADlD,AAAW,UAAD,KAAK,mCAAe,oBAAoB,sCAChC,AAAc,aAAD;AAEoB,MADnD,AAAW,UAAD,KAAK,mCAAe,qBAAqB,uCACjC,AAAc,aAAD;AAEmB,MADlD,AAAW,UAAD,KAAK,mCAAe,oBAAoB,sCAChC,AAAc,aAAD;AAEkB,MADjD,AAAW,UAAD,KAAK,mCAAe,mBAAmB,qCAC/B,AAAc,aAAD;AAEmB,MADlD,AAAW,UAAD,KAAK,mCAAe,oBAAoB,sCAChC,AAAc,aAAD;AAEmB,MADlD,AAAW,UAAD,KAAK,mCAAe,oBAAoB,sCAChC,AAAc,aAAD;AAEkB,MADjD,AAAW,UAAD,KAAK,mCAAe,mBAAmB,qCAC/B,AAAc,aAAD;AAEmB,MADlD,AAAW,UAAD,KAAK,mCAAe,oBAAoB,sCAChC,AAAc,aAAD;IACjC;;;QA1MO;;QACA;;QACA;;QACA;;QACA;;QACA;;QACA;;IA6BA;IAGA;IAGA;IAzCA;IACA;IACA;IACA;IACA;IACA;IACA;;EACL;;;;;;;;;;;;;;;;;;;;;;;;;;MAoCkB,oDAAoB;;;MACpB,iDAAiB;;;MAEjB,kDAAkB;;;MAClB,qDAAqB;;;MAErB,mDAAmB;;;MACnB,sDAAsB;;;MACtB,mDAAmB;;;MAEnB,sDAAsB;;;MACtB,mDAAmB;;;MAEnB,wDAAwB;;;MACxB,qDAAqB;;;MAErB,iDAAiB;;;MACjB,gDAAgB;;;MAChB,iDAAiB;;;MAMV,4CAAY;YAAG;;MAWf,uCAAO;YAAG;;MAYV,2CAAW;YAAG;;MAWd,0CAAU;YAAG;;MAWb,qCAAK;YAAG;;MAYR,yCAAS;YAAG;;MAUN,2CAAW;YAAkB,gCAC5D,8CACA,yCACA,6CACA,4CACA,uCACA;;;;;;;;;;;;;;IAqFU;;;;;;IAIF;;;;;;;AAIR,UAAI,AAAgB;AACU,QAA5B;;AAEF,YAAsB,gBAAf;IACT;;AAME,UAAI,AAAe;AACW,QAA5B;;AAEF,YAAqB,gBAAd;IACT;;;AAKE,UAAI,AAAgB,iCAAW,AAAe;AAChC;AACA;AAED,6BACP,sDAAuB,KAAK,EAAE;AACvB,8BACP,sDAAuB,KAAK,EAAE;AAElC,YAAI,AAAe,cAAD,YAAY,AAAgB,eAAD;AAEK,UAAhD,uBAAiB,AAAM,KAAD,WAAW,cAAc;AACG,UAAlD,wBAAkB,AAAM,KAAD,WAAW,eAAe;AACjD;;AAGS,4BACP,sDAAuB,KAAK,EAAE;AACvB,6BACP,sDAAuB,KAAK,EAAE;AAElC,YAAI,AAAc,aAAD,YAAY,AAAe,cAAD;AAEM,UAA/C,uBAAiB,AAAM,KAAD,WAAW,aAAa;AACG,UAAjD,wBAAkB,AAAM,KAAD,WAAW,cAAc;AAChD;;AAOyC,QAF3C,uBAAiB,AAAe,cAAD,WACzB,AAAM,KAAD,WAAW,cAAc,IAC9B,AAAM,KAAD,YAAyB,KAAd,aAAa,EAAb,aAAiB;AAGK,QAF5C,wBAAkB,AAAgB,eAAD,WAC3B,AAAM,KAAD,WAAW,eAAe,IAC/B,AAAM,KAAD,YAA0B,MAAf,cAAc,EAAd,cAAkB;;IAE5C;8BAMuC,YAAkB;UAAlB;UAAkB;AACvD,YAAO,AAAW,AAAM,UAAP,WAAU,wBACvB,AAAiD,iDAAZ,UAAU;AACnD,UAAqB,aAAjB,AAAW,UAAD,UAAS;AAGgC,QAArD,aAAmB,oBAAW,UAAU,EAAE,UAAU;;AAEzC,uBAA2C,aAA9B,AAAW,UAAD,uBAAsB;AAC7C,uBAA2C,aAA9B,AAAW,UAAD,uBAAsB;AAC1D,YAAO,AAAiC,uBAAxB,UAAU,EAAE,UAAU,IAAI,mBAAS,UAAU,EAAE,UAAU;IAC3E;kCAWU,YAAkB,YAAmB;UAArC;UAAkB;UAAmB;AAC7C,YAAO,AAAW,AAAM,UAAP,WAAU,wBACvB,AAAoD,oDAAZ,UAAU;AACtD,eAAO,mBAAyB,IAAU,IAAQ;YAAlB;YAAU;YAAQ;AACpC,6BAAiB,AAAG,EAAD,WAAW,KAAK;AAC/C,cAAO,mDAAmB,cAAc,EAAE,EAAE;;;AAIjC,sBAAY,kBAAkB,CAAC,UAAU,EAAE,UAAU,EAAE;AACpE,UAAc,aAAV,SAAS,iBAAG,gBAAgB;AAE9B,cAAO;;AAE8B,MAAvC,aAAa,AAAW,UAAD,WAAW;AAClC,YAAO,mDACH,UAAU,EAAE,UAAU,EAAE,gBAAgB,EAAE,kBAAkB;IAClE;8BASQ,YACA,YACC,kBACa;UAHd;UACA;UACC;UACa;AAEpB,YAAO,AAAW,AAAM,UAAP,WAAU,wBACvB,AAAoD,oDAAZ,UAAU;AAMlD,0BAAgB;AAChB,qBAAW;AACX,qBAAW;AACf,aAAO,AAAc,aAAD,UACf,AAAS,AAAY,QAAb,GAAG,QAAQ;AACZ,wBAAkC,EAArB,AAAS,QAAD,GAAG,QAAQ,IAAK;AAClC,wBAAY,AAAU,UAAA,CAAC,UAAU,EAAE,UAAU,EAAE,SAAS;AACrE,YAAc,aAAV,SAAS,iBAAG,gBAAgB;AACV,UAApB,WAAW,SAAS;;AAEA,UAApB,WAAW,SAAS;;AAEP,QAAf,gBAAA,AAAa,aAAA;;AAIf,YAAO,SAAQ;IACjB;;UAGqD;AACd,MAA/B,0BAAoB,UAAU;AACsB,MAA1D,AAAW,UAAD,KAAK,yCAA2B,SAAS;AAEmB,MADtE,AACK,UADK,KACD,yCAA2B,kBAAkB;AACoB,MAA1E,AAAW,UAAD,KAAK,yCAA2B,iBAAiB;AACW,MAAtE,AAAW,UAAD,KAAK,gCAAY,cAAc,gCAA0B;IACrE;;AAIE,YAAO,eAAW,YAAO;IAC3B;;UAGyB;AACvB,YAAa,AAAe,aAArB,YAAe,WAAN,KAAK,eAAqB,eAAX,iBAAoB,WAAN,KAAK;IACpD;;iDA7KkB,OAAY;QAAZ;QAAY;IAoBvB;IAUA;IA9BW;IAAY;;EAAW;;;;;;;;;;;;;;;;;;;;;;;;;MAErB,oDAAqB;;;MACrB,mDAAoB;;;;;;;;IA2N1C;;;QAJK;;;;;EAIL;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiBW;;IAAW;;;AAAX;IAAW;;;AAGX;;IAAO;;;AAAP;IAAO;;;AACP;;IAAO;;;AAAP;IAAO;;;AACP;;IAAS;;;AAAT;IAAS;;;AACT;;IAAS;;;AAAT;IAAS;;;AACT;;IAAQ;;;AAAR;IAAQ;;;AACR;;IAAQ;;;AAAR;IAAQ;;AAGf,YAA+B,AACC,EADhB,AAAU,aAAlB,8BAAU,iBAAU,MACb,AAAY,aAAtB,gCAAY,mBAAY,MACf,AAAW,aAApB,+BAAW,kBAAW;IAC7B;;AAGE,YAAuB,cAAhB,wBAAkB;IAC3B;;AAGE,YAAO,AAAE,AAAc,kBAAZ,mCAAc;IAC3B;;AAMM,mBAAS;AACT,qBAAW;AACX,oBAAU;AACV,mBAAS,CAAC;AACV,qBAAW,CAAC;AACZ,oBAAU,CAAC;AACX,kBAAQ;AACZ,eAAS,IAAI,oBAAe,aAAF,CAAC,kBAAI,qBAAa,IAAC,aAAD,CAAC;AAC/B,oBAAQ,AAAM,mBAAC,CAAC;AACI,QAAhC,QAAA,AAAM,KAAD,gBAAoB,AAAE,eAAlB,AAAS,oBAAC,KAAK;AACxB,YAAc,aAAV,AAAM,KAAD,qBAAO,MAAM;AACF,UAAlB,SAAS,AAAM,KAAD;;AAEhB,YAAc,aAAV,AAAM,KAAD,qBAAO,MAAM;AACF,UAAlB,SAAS,AAAM,KAAD;;AAEhB,YAAgB,aAAZ,AAAM,KAAD,uBAAS,QAAQ;AACF,UAAtB,WAAW,AAAM,KAAD;;AAElB,YAAgB,aAAZ,AAAM,KAAD,uBAAS,QAAQ;AACF,UAAtB,WAAW,AAAM,KAAD;;AAElB,YAAe,aAAX,AAAM,KAAD,sBAAQ,OAAO;AACF,UAApB,UAAU,AAAM,KAAD;;AAEjB,YAAe,aAAX,AAAM,KAAD,sBAAQ,OAAO;AACF,UAApB,UAAU,AAAM,KAAD;;;AAGH,MAAhB,gBAAU,MAAM;AACA,MAAhB,gBAAU,MAAM;AACI,MAApB,kBAAY,QAAQ;AACA,MAApB,kBAAY,QAAQ;AACF,MAAlB,iBAAW,OAAO;AACA,MAAlB,iBAAW,OAAO;AACC,MAAnB,oBAAc,KAAK;IACrB;;AAME,qBAAO,oCAAY;AAET,uBAAa;AACD,mBAClB,0CAA2B,aAAX,UAAU,IAAG,GAAG,oBAAa,gBAAW;AAEpC,MAAxB,qBAAc,UAAU;AACR,MAAhB;AACA,YAAO,OAAM;IACf;;AAIY,sBAAoB,aAAR,8BAAU;AACtB,wBAAwB,aAAV,gCAAY;AAC1B,uBAAsB,aAAT,+BAAW;AAClC,UAAI,AAAU,SAAD,IAAI,WAAW,IAAI,AAAU,SAAD,IAAI,UAAU;AACrD,cAAuB;YAClB,KAAI,AAAY,WAAD,IAAI,SAAS,IAAI,AAAY,WAAD,IAAI,UAAU;AAC9D,cAAuB;;AAEvB,cAAuB;;IAE3B;;AAWwB,6BAAmB;AACzC,eAAI,cAAoB,GAAS;YAAT;YAAS;AAC/B,iBAAI,UAAc,OAAW,QAAY;cAAvB;cAAW;cAAY;AACvC,gBAAiC,EAApB,AAAM,aAAZ,KAAK,KAAI,KAAY,aAAP,MAAM,KAAI,uBAAI,KAAK;;;AAG1C,gBAAQ,gBAAgB;;;AAEV,yBAAS,SAAS,CAAC,AAAE,CAAD,MAAM,AAAE,CAAD,QAAQ,AAAE,CAAD;AACpC,yBAAS,SAAS,CAAC,AAAE,CAAD,MAAM,AAAE,CAAD,QAAQ,AAAE,CAAD;AAC9C,kBAAO,AAAO,OAAD,aAAW,MAAM;;;;AAEpB,yBAAS,SAAS,CAAC,AAAE,CAAD,QAAQ,AAAE,CAAD,MAAM,AAAE,CAAD;AACpC,yBAAS,SAAS,CAAC,AAAE,CAAD,QAAQ,AAAE,CAAD,MAAM,AAAE,CAAD;AAC9C,kBAAO,AAAO,OAAD,aAAW,MAAM;;;;AAEpB,yBAAS,SAAS,CAAC,AAAE,CAAD,OAAO,AAAE,CAAD,QAAQ,AAAE,CAAD;AACrC,yBAAS,SAAS,CAAC,AAAE,CAAD,OAAO,AAAE,CAAD,QAAQ,AAAE,CAAD;AAC/C,kBAAO,AAAO,OAAD,aAAW,MAAM;;;;;AAMlB,wBACd,AAAO,sBAAQ,oBAAyB,aAAZ,sBAAc;AACf,MAA/B,AAAY,WAAD,QAAM,aAAa;AACgC,MAA9D,AAAO,2BAAa,oBAAyB,aAAZ,sBAAc,GAAG,WAAW;AACnD,mBAA2B,CAAL,aAAZ,qBAAc;AAClC,eAAS,IAAI,GAAG,QAAQ,GAAG,AAAE,CAAD,iBAAI,AAAY,WAAD,YAAS,IAAA,AAAC,CAAA;AACV,QAAzC,QAAA,AAAM,KAAD,gBAA6B,AAAE,eAA3B,AAAS,oBAAC,AAAW,WAAA,QAAC,CAAC;AAChC,YAAI,AAAM,KAAD,IAAI,MAAM;AAGjB,gBAAO,oBAAqB,aAAZ,sBAAc,GAAG,AAAE,CAAD,gBAAG;;;AAGzC,YAAO;IACT;;AAGM,mBAAS;AACT,qBAAW;AACX,oBAAU;AACV,4BAAkB;AACtB,eAAS,IAAI,oBAAe,aAAF,CAAC,kBAAI,qBAAa,IAAC,aAAD,CAAC;AAC/B,oBAAQ,AAAM,mBAAC,CAAC;AAClB,8BAAkC,AAAE,eAAlB,AAAS,oBAAC,KAAK;AACT,QAAlC,kBAAA,AAAgB,eAAD,gBAAI,eAAe;AACG,QAArC,SAAA,AAAO,MAAD,GAAoB,aAAhB,eAAe,iBAAG,AAAM,KAAD;AACQ,QAAzC,WAAA,AAAS,QAAD,GAAoB,aAAhB,eAAe,iBAAG,AAAM,KAAD;AACI,QAAvC,UAAA,AAAQ,OAAD,GAAoB,aAAhB,eAAe,iBAAG,AAAM,KAAD;;AAE1B,oBAAqC,CAA1B,AAAO,MAAD,GAAG,eAAe;AACnC,sBAAyC,CAA5B,AAAS,QAAD,GAAG,eAAe;AACvC,qBAAuC,CAA3B,AAAQ,OAAD,GAAG,eAAe;AAC/C,YAAO,wCACC,sBAAS,KAAM,OAAO,EAAE,SAAS,EAAE,QAAQ,GACjD,eAAe;IAEnB;;oDAhLS,aAAkB,aAAkB,WAAgB;QAApD;QAAkB;QAAkB;QAAgB;0CAYpD;sCAGA;sCACA;wCACA;wCACA;uCACA;uCACA;IApBA;IAAkB;IAAkB;IAAgB;AAC3C,IAAhB;EACF;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAqLI,aAAQ;;EACd;;;;;;;;;;;;UAOiC;AACU,mBAAS,AAAK,mBAAC,AAAM,KAAD;AAC3D,UAAI,AAAO,MAAD;AACR,cAAO;;AAEoB,oBAAU,AAAM,MAAA,QAAC,AAAM,KAAD;AACnD,UAAI,AAAQ,OAAD;AACT,cAAO;;AAET,YAAO,AAAO,QAAA,QAAC,AAAM,KAAD;IACtB;SAEwB;UAAiB;UAAjB;UAAiB;AAC7B,gBAAM,AAAI,GAAD;AACT,iBAAO,AAAI,GAAD;AACV,kBAAQ,AAAI,GAAD;AAEhB,qBAAW;AAEiB,mBAAS,AAAK,mBAAC,GAAG;AACnD,UAAI,AAAO,MAAD;AAC4C,QAApD,AAAK,mBAAC,GAAG,EAAI,SAAqC;AACnC,QAAf,WAAW;;AAGU,oBAAU,AAAM,MAAA,QAAC,IAAI;AAC5C,UAAI,AAAQ,OAAD;AACoC,QAA7C,AAAM,MAAA,QAAC,IAAI,EAAI,UAA4B;AAC5B,QAAf,WAAW;;AAGb,UAAI,AAAO,AAAQ,OAAR,QAAC,KAAK;AACA,QAAf,WAAW;;AAES,MAAtB,AAAO,OAAA,QAAC,KAAK,EAAI,KAAK;AAEtB,UAAI,QAAQ;AACI,QAAd,AAAM,gBAAI,GAAG;;;IAEjB;gBAEsB;;;AACpB,eAAW,MAAO;AAChB,sBAAI,AAAS,SAAA,CAAC,GAAG;AAC6B,gBAA5C,AAAK,mBAAC,AAAI,GAAD;wBAAJ,cAAU,WAAC,AAAI,GAAD,sBAAJ,OAAY,aAAO,AAAI,GAAD;;;AAGW,MAApD,AAAM,wBAAY;YAAO;AAAU,cAAA,AAAS,UAAA,CAAC,KAAK;;IACpD;;AAGE,YAAO;IACT;;AAGE,YAAO,AAAM;IACf;;;IA5DgD,cACN;IACX,cAAQ;;EA2DzC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAWmD;AAC/C,sBAAI,AAAe;AACjB,gBAAO;;AAEP,gBAAO,uBAAgB;;MAE3B;;sBASyC,QAAY,OAAW;UAAvB;UAAY;UAAW;UACrD;AADoB;AAEnB,wBAAkB,aAAN,KAAK,IAAG;AAC1B;AACA;AACA;AACA;AACJ,YAAI,AAAO,MAAD;AACqB,UAA7B,WAAW,AAAO,AAAI,MAAL;AACa,UAA9B,SAAS,AAAO,AAAO,MAAR;AACe,UAA9B,WAAW,AAAO,AAAK,MAAN;AACY,UAA7B,SAAS,AAAO,AAAM,MAAP;AACf,gBAAgB,aAAT,QAAQ,KAAI;AACnB,gBAAc,aAAP,MAAM,kBAAI,MAAM;AACvB,gBAAgB,aAAT,QAAQ,KAAI;AACnB,gBAAc,aAAP,MAAM,kBAAI,KAAK;;AAEV,UAAZ,WAAW;AACI,UAAf,SAAS,MAAM;AACH,UAAZ,WAAW;AACG,UAAd,SAAS,KAAK;;AAEZ,wBAAY;AAChB,iBAAS,MAAM,QAAQ,EAAM,aAAJ,GAAG,iBAAG,MAAM,GAAI,MAAF,aAAE,GAAG,IAAL;AACrC,mBAAS,MAAM,QAAQ,EAAM,aAAJ,GAAG,iBAAG,MAAM,GAAI,MAAF,aAAE,GAAG,IAAL;AAC3B,2BAAe,AAAY,aAAhB,GAAG,IAAG,SAAS,GAAO,aAAJ,GAAG,IAAG;AAEnC,wBAAQ,AAAO,MAAD,aAAW,QAAQ;AAC/B,yBAAS,iBAAoB,CAAP,aAAN,KAAK,KAAI,KAAO,AAAM,KAAD,cAAI;AACvC,YAAd,YAAA,AAAU,SAAD,GAAI;AACb,kBAAM,MAAM;;;AAGhB,cAAO,AAAU,SAAD,KAAyB,AAAsB,CAAlC,aAAP,MAAM,iBAAG,QAAQ,MAAY,aAAP,MAAM,iBAAG,QAAQ,KAAI;MACnE;;;UAE8B;AACb,qBAAoB,0BAAU,KAAK;AAClD,oBAAI,AAAQ;AACV,iBAAmB,SAAU;AAC3B,yBAAK,AAAM,MAAA,CAAC,QAAQ;AAClB,kBAAO;;;;AAIb,YAAO;IACT;;UAEoD;AAAV;AAOxC,iBAAM;cAAoB;AACxB,gBAAa,uBACX,AAAM,KAAD,QACK,cAAV,AAAM,KAAD,oBACO,cAAZ,AAAM,KAAD,sBACM,cAAX,AAAM,KAAD;;;AAIO,yBACZ,MAAM,AAAM,KAAD,qBAAuC;AACtD,YAAI,AAAU,SAAD;AACwB,UAAnC,WAAM;;AAEc,qBAClB,sBAAgB,SAAS,EAAE,AAAM,KAAD,QAAQ,AAAM,KAAD,kBAAiB;AAC5C,mBAAO;AACtB;AACM;AAEb,iBAAW,QAAS,OAAM;AAIZ,+BAAiB,aAAa,CAAC,KAAK;AACpC,yBAAW,AAAe,cAAD,WAAW;AAEhD,cAAI,AAAe,AAAM,cAAP,WAAU;AAC1B;;AAEF,cAAiB,aAAb,YAAY,EAAI,QAAQ;AACH,YAAvB,eAAe,QAAQ;AACW,YAAlC,oBAAoB,AAAI,IAAA,MAAC,QAAQ;AACjC,gBAAI,AAAkB,iBAAD;AAC+B,cAAlD,AAAI,IAAA,MAAC,QAAQ,EAAI,oBAAoB;;;AAGa,UAArC,AAAE,eAAnB,iBAAiB,UAAkC,aAAxB,AAAkB,iBAAD,UAAS;;AAKrD,QAFF,AAAK,IAAD,aAAa;cAAO;AACtB,gBAAO,0BAAmB,KAAK;;AAEjC,YAAgB,aAAZ,AAAK,IAAD,yBAAW;AAGK,UAAtB,AAAe;AACf,mBAAW,QAAS,AAAK,KAAD;AACqC,YAA3D,AAAe,2BAAI,uCAAa,KAAK,EAAa,AAAE,eAAb,AAAI,IAAA,MAAC,KAAK;;;AAI7B,UAAtB,AAAe;AACwC,UAAvD,AAAe,8BAAO,sBAAgB,gBAAW,IAAI;;AAEvD,cAAO;MACT;;sBAGM,WACY;UADZ;UACY;AAEhB,eAAI,iBAAiC,GAAmB;YAAnB;YAAmB;AACtD,cAAO,AAAE,AAAY,EAAb,yBAAuB,AAAE,CAAD;;;AAKG,0BACjC,iDAAmC,gBAAgB;AAGU,MADjE,AAAc,aAAD,KAAK,0CACd,GAAoB,aAAjB,AAAU,SAAD,WAAU,GAAG,SAAS,EAAE,AAAU,AAAK,SAAN;AAGZ,MAArC,kBAAY,aAAa,EAAE,SAAS;AAEpC,YAAO,8BAAuB,aAAa;IAC7C;kBAOgD,OAAiB;UAAjB;UAAiB;AAC/D,aAAoB,aAAb,AAAM,KAAD,wBAAU,OAAO;AACL,6BAAiB,AAAM,KAAD;AAC5C,sBAAI,AAAe,cAAD;AAEoB,UAApC,AAAM,KAAD,KAAK,AAAe,cAAD;AAEC,UAAzB,AAAM,KAAD,KAAK,cAAc;;AAGxB;;;IAGN;;UAImC;AACR,mBAAuB;AAChD,eAAqB,iBAAkB,AAAiB,iBAAD;AAClC,2BAAe,AAAe,cAAD;AAChD,uBAAK,yBAAmB,AAAa,YAAD;AACV,UAAxB,AAAO,MAAD,OAAK,YAAY;;;AAG3B,YAAO,OAAM;IACf;;;QA5LO;QACA;;QACA;QACA;;IAHA;IACA;IACA;IACA;UACM,AAAO,AAAQ,MAAT,YAAmB,aAAP,MAAM,EAAS;IACzB,uBAAgB;;EAAE;;;;;;;;;;;;;;;;;;;;;;;;;;QAlSK;AAC5C,aAAK;UAAkB;AAErB,YAA0B,cAAnB,AAAS,QAAD;;;AAGjB,aAAK;UAAkB;AAErB,YAA0B,cAAnB,AAAS,QAAD;;;AAIjB,aAAK;UAAyB;AAI5B,YAAoB,AACc,cAD3B,AAAS,QAAD,eACE,aAAb,AAAS,QAAD,eACY,aAApB,AAAS,QAAD;;;AAGd,UAA4C,YAApC,QAAQ,CAAC,KAAK,iBAAM,QAAQ,CAAC,KAAK,iBAAM,eAAe,CAAC,KAAK;EACvE","file":"../../../../../../../E:/packages/palette_generator/palette_generator.dart.lib.js"}');
  // Exports:
  return {
    palette_generator: palette_generator
  };
}));

//# sourceMappingURL=palette_generator.dart.lib.js.map
