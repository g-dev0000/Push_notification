define(['dart_sdk', 'packages/awesome_notifications/src/utils/assert_utils.dart', 'packages/awesome_notifications/src/enumerators/notification_source.dart', 'packages/awesome_notifications/src/enumerators/notification_life_cycle.dart', 'packages/awesome_notifications/src/enumerators/notification_privacy.dart', 'packages/flutter/src/painting/_network_image_web.dart', 'packages/awesome_notifications/src/utils/html_utils.dart', 'packages/awesome_notifications/src/models/model.dart', 'packages/awesome_notifications/src/models/notification_interval.dart', 'packages/awesome_notifications/src/models/notification_calendar.dart', 'packages/awesome_notifications/src/models/notification_schedule.dart', 'packages/awesome_notifications/src/enumerators/notification_layout.dart', 'packages/awesome_notifications/src/enumerators/notification_importance.dart', 'packages/awesome_notifications/src/enumerators/group_sort.dart', 'packages/awesome_notifications/src/enumerators/group_alert_behaviour.dart', 'packages/awesome_notifications/src/enumerators/default_ringtone_type.dart', 'packages/awesome_notifications/src/utils/string_utils.dart', 'packages/awesome_notifications/src/enumerators/media_source.dart', 'packages/flutter/src/foundation/synchronous_future.dart', 'packages/flutter/src/painting/image_stream.dart', 'packages/flutter/src/foundation/object.dart', 'packages/flutter/src/painting/image_resolution.dart', 'packages/awesome_notifications/src/utils/media_abstract_utils.dart', 'packages/awesome_notifications/src/enumerators/action_button_type.dart', 'packages/flutter/src/widgets/widget_span.dart', 'packages/flutter/src/services/system_channels.dart', 'packages/awesome_notifications/src/utils/date_utils.dart'], (function load__packages__awesome_notifications__src__models__received_models__received_notification_dart(dart_sdk, packages__awesome_notifications__src__utils__assert_utils$46dart, packages__awesome_notifications__src__enumerators__notification_source$46dart, packages__awesome_notifications__src__enumerators__notification_life_cycle$46dart, packages__awesome_notifications__src__enumerators__notification_privacy$46dart, packages__flutter__src__painting___network_image_web$46dart, packages__awesome_notifications__src__utils__html_utils$46dart, packages__awesome_notifications__src__models__model$46dart, packages__awesome_notifications__src__models__notification_interval$46dart, packages__awesome_notifications__src__models__notification_calendar$46dart, packages__awesome_notifications__src__models__notification_schedule$46dart, packages__awesome_notifications__src__enumerators__notification_layout$46dart, packages__awesome_notifications__src__enumerators__notification_importance$46dart, packages__awesome_notifications__src__enumerators__group_sort$46dart, packages__awesome_notifications__src__enumerators__group_alert_behaviour$46dart, packages__awesome_notifications__src__enumerators__default_ringtone_type$46dart, packages__awesome_notifications__src__utils__string_utils$46dart, packages__awesome_notifications__src__enumerators__media_source$46dart, packages__flutter__src__foundation__synchronous_future$46dart, packages__flutter__src__painting__image_stream$46dart, packages__flutter__src__foundation__object$46dart, packages__flutter__src__painting__image_resolution$46dart, packages__awesome_notifications__src__utils__media_abstract_utils$46dart, packages__awesome_notifications__src__enumerators__action_button_type$46dart, packages__flutter__src__widgets__widget_span$46dart, packages__flutter__src__services__system_channels$46dart, packages__awesome_notifications__src__utils__date_utils$46dart) {
  'use strict';
  const core = dart_sdk.core;
  const _js_helper = dart_sdk._js_helper;
  const ui = dart_sdk.ui;
  const collection = dart_sdk.collection;
  const _interceptors = dart_sdk._interceptors;
  const typed_data = dart_sdk.typed_data;
  const async = dart_sdk.async;
  const io = dart_sdk.io;
  const convert = dart_sdk.convert;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const assert_utils = packages__awesome_notifications__src__utils__assert_utils$46dart.src__utils__assert_utils;
  const notification_source = packages__awesome_notifications__src__enumerators__notification_source$46dart.src__enumerators__notification_source;
  const notification_life_cycle = packages__awesome_notifications__src__enumerators__notification_life_cycle$46dart.src__enumerators__notification_life_cycle;
  const notification_privacy = packages__awesome_notifications__src__enumerators__notification_privacy$46dart.src__enumerators__notification_privacy;
  const image_provider = packages__flutter__src__painting___network_image_web$46dart.src__painting__image_provider;
  const _network_image_web = packages__flutter__src__painting___network_image_web$46dart.src__painting___network_image_web;
  const html_utils = packages__awesome_notifications__src__utils__html_utils$46dart.src__utils__html_utils;
  const model = packages__awesome_notifications__src__models__model$46dart.src__models__model;
  const notification_interval = packages__awesome_notifications__src__models__notification_interval$46dart.src__models__notification_interval;
  const notification_calendar = packages__awesome_notifications__src__models__notification_calendar$46dart.src__models__notification_calendar;
  const notification_schedule = packages__awesome_notifications__src__models__notification_schedule$46dart.src__models__notification_schedule;
  const notification_layout = packages__awesome_notifications__src__enumerators__notification_layout$46dart.src__enumerators__notification_layout;
  const notification_importance = packages__awesome_notifications__src__enumerators__notification_importance$46dart.src__enumerators__notification_importance;
  const group_sort = packages__awesome_notifications__src__enumerators__group_sort$46dart.src__enumerators__group_sort;
  const group_alert_behaviour = packages__awesome_notifications__src__enumerators__group_alert_behaviour$46dart.src__enumerators__group_alert_behaviour;
  const default_ringtone_type = packages__awesome_notifications__src__enumerators__default_ringtone_type$46dart.src__enumerators__default_ringtone_type;
  const string_utils = packages__awesome_notifications__src__utils__string_utils$46dart.src__utils__string_utils;
  const media_source = packages__awesome_notifications__src__enumerators__media_source$46dart.src__enumerators__media_source;
  const synchronous_future = packages__flutter__src__foundation__synchronous_future$46dart.src__foundation__synchronous_future;
  const image_stream = packages__flutter__src__painting__image_stream$46dart.src__painting__image_stream;
  const object = packages__flutter__src__foundation__object$46dart.src__foundation__object;
  const image_resolution = packages__flutter__src__painting__image_resolution$46dart.src__painting__image_resolution;
  const media_abstract_utils = packages__awesome_notifications__src__utils__media_abstract_utils$46dart.src__utils__media_abstract_utils;
  const action_button_type = packages__awesome_notifications__src__enumerators__action_button_type$46dart.src__enumerators__action_button_type;
  const binding = packages__flutter__src__widgets__widget_span$46dart.src__widgets__binding;
  const message_codec = packages__flutter__src__services__system_channels$46dart.src__services__message_codec;
  const platform_channel = packages__flutter__src__services__system_channels$46dart.src__services__platform_channel;
  const message_codecs = packages__flutter__src__services__system_channels$46dart.src__services__message_codecs;
  const date_utils = packages__awesome_notifications__src__utils__date_utils$46dart.src__utils__date_utils;
  var received_notification = Object.create(dart.library);
  var received_action = Object.create(dart.library);
  var push_notification = Object.create(dart.library);
  var basic_notification_content = Object.create(dart.library);
  var notification_content = Object.create(dart.library);
  var notification_channel = Object.create(dart.library);
  var resource_image_provider = Object.create(dart.library);
  var bitmap_utils = Object.create(dart.library);
  var notification_button = Object.create(dart.library);
  var awesome_notifications_core = Object.create(dart.library);
  var $addAll = dartx.addAll;
  var $isEmpty = dartx.isEmpty;
  var $containsKey = dartx.containsKey;
  var $_get = dartx._get;
  var $add = dartx.add;
  var $isNotEmpty = dartx.isNotEmpty;
  var $length = dartx.length;
  var $toString = dartx.toString;
  var $replaceAll = dartx.replaceAll;
  var $runtimeType = dartx.runtimeType;
  var $hashCode = dartx.hashCode;
  var $_set = dartx._set;
  dart._checkModuleNullSafetyMode(true);
  var T = {
    StringN: () => (T.StringN = dart.constFn(dart.nullable(core.String)))(),
    NotificationSourceN: () => (T.NotificationSourceN = dart.constFn(dart.nullable(notification_source.NotificationSource)))(),
    NotificationLifeCycleN: () => (T.NotificationLifeCycleN = dart.constFn(dart.nullable(notification_life_cycle.NotificationLifeCycle)))(),
    IdentityMapOfString$dynamic: () => (T.IdentityMapOfString$dynamic = dart.constFn(_js_helper.IdentityMap$(core.String, dart.dynamic)))(),
    intN: () => (T.intN = dart.constFn(dart.nullable(core.int)))(),
    boolN: () => (T.boolN = dart.constFn(dart.nullable(core.bool)))(),
    MapOfString$String: () => (T.MapOfString$String = dart.constFn(core.Map$(core.String, core.String)))(),
    MapNOfString$String: () => (T.MapNOfString$String = dart.constFn(dart.nullable(T.MapOfString$String())))(),
    NotificationPrivacyN: () => (T.NotificationPrivacyN = dart.constFn(dart.nullable(notification_privacy.NotificationPrivacy)))(),
    ImageProviderOfObject: () => (T.ImageProviderOfObject = dart.constFn(image_provider.ImageProvider$(core.Object)))(),
    ImageProviderNOfObject: () => (T.ImageProviderNOfObject = dart.constFn(dart.nullable(T.ImageProviderOfObject())))(),
    LinkedHashMapOfString$dynamic: () => (T.LinkedHashMapOfString$dynamic = dart.constFn(collection.LinkedHashMap$(core.String, dart.dynamic)))(),
    JSArrayOfNotificationActionButton: () => (T.JSArrayOfNotificationActionButton = dart.constFn(_interceptors.JSArray$(notification_button.NotificationActionButton)))(),
    MapOfString$dynamic: () => (T.MapOfString$dynamic = dart.constFn(core.Map$(core.String, dart.dynamic)))(),
    JSArrayOfMapOfString$dynamic: () => (T.JSArrayOfMapOfString$dynamic = dart.constFn(_interceptors.JSArray$(T.MapOfString$dynamic())))(),
    NotificationLayoutN: () => (T.NotificationLayoutN = dart.constFn(dart.nullable(notification_layout.NotificationLayout)))(),
    NotificationImportanceN: () => (T.NotificationImportanceN = dart.constFn(dart.nullable(notification_importance.NotificationImportance)))(),
    Int64ListN: () => (T.Int64ListN = dart.constFn(dart.nullable(typed_data.Int64List)))(),
    ColorN: () => (T.ColorN = dart.constFn(dart.nullable(ui.Color)))(),
    GroupSortN: () => (T.GroupSortN = dart.constFn(dart.nullable(group_sort.GroupSort)))(),
    GroupAlertBehaviorN: () => (T.GroupAlertBehaviorN = dart.constFn(dart.nullable(group_alert_behaviour.GroupAlertBehavior)))(),
    DefaultRingtoneTypeN: () => (T.DefaultRingtoneTypeN = dart.constFn(dart.nullable(default_ringtone_type.DefaultRingtoneType)))(),
    SynchronousFutureOfResourceImage: () => (T.SynchronousFutureOfResourceImage = dart.constFn(synchronous_future.SynchronousFuture$(resource_image_provider.ResourceImage)))(),
    StreamControllerOfReceivedNotification: () => (T.StreamControllerOfReceivedNotification = dart.constFn(async.StreamController$(received_notification.ReceivedNotification)))(),
    StreamControllerOfReceivedAction: () => (T.StreamControllerOfReceivedAction = dart.constFn(async.StreamController$(received_action.ReceivedAction)))(),
    ObjectN: () => (T.ObjectN = dart.constFn(dart.nullable(core.Object)))(),
    IdentityMapOfString$ObjectN: () => (T.IdentityMapOfString$ObjectN = dart.constFn(_js_helper.IdentityMap$(core.String, T.ObjectN())))(),
    FutureOrOfbool: () => (T.FutureOrOfbool = dart.constFn(async.FutureOr$(core.bool)))(),
    Uint8ListN: () => (T.Uint8ListN = dart.constFn(dart.nullable(typed_data.Uint8List)))(),
    FutureOrOfUint8ListN: () => (T.FutureOrOfUint8ListN = dart.constFn(async.FutureOr$(T.Uint8ListN())))(),
    JSArrayOfNotificationModel: () => (T.JSArrayOfNotificationModel = dart.constFn(_interceptors.JSArray$(push_notification.NotificationModel)))(),
    ListOfNotificationModel: () => (T.ListOfNotificationModel = dart.constFn(core.List$(push_notification.NotificationModel)))(),
    DateTimeN: () => (T.DateTimeN = dart.constFn(dart.nullable(core.DateTime)))()
  };
  var T$Eval = Object.assign({
    _: () => T$Eval
  }, T);
  var S = {
    _: () => S
  };
  var S$Eval = Object.assign({
    _: () => S$Eval
  }, S);
  const CT = Object.create({
    _: () => (C, CT)
  });
  dart.defineLazy(CT, {
    get C0() {
      return C[0] = dart.const({
        __proto__: action_button_type.ActionButtonType.prototype,
        [_name]: "ActionButtonType.Default",
        index: 0
      });
    },
    get C3() {
      return C[3] = dart.const({
        __proto__: message_codecs.StandardMessageCodec.prototype
      });
    },
    get C2() {
      return C[2] = dart.const({
        __proto__: message_codecs.StandardMethodCodec.prototype,
        [StandardMethodCodec_messageCodec]: C[3] || CT.C3
      });
    },
    get C1() {
      return C[1] = dart.const({
        __proto__: platform_channel.MethodChannel.prototype,
        [MethodChannel__binaryMessenger]: null,
        [MethodChannel_codec]: C[2] || CT.C2,
        [MethodChannel_name]: "awesome_notifications"
      });
    }
  }, false);
  var C = Array(4).fill(void 0);
  var I = [
    "file:///E:/plugins/awesome_notifications/lib/src/models/received_models/received_notification.dart",
    "file:///E:/plugins/awesome_notifications/lib/src/models/basic_notification_content.dart",
    "package:awesome_notifications/src/models/basic_notification_content.dart",
    "package:awesome_notifications/src/models/received_models/received_notification.dart",
    "file:///E:/plugins/awesome_notifications/lib/src/models/received_models/received_action.dart",
    "package:awesome_notifications/src/models/received_models/received_action.dart",
    "file:///E:/plugins/awesome_notifications/lib/src/models/received_models/push_notification.dart",
    "package:awesome_notifications/src/models/received_models/push_notification.dart",
    "file:///E:/plugins/awesome_notifications/lib/src/models/notification_content.dart",
    "package:awesome_notifications/src/models/notification_content.dart",
    "file:///E:/plugins/awesome_notifications/lib/src/models/notification_channel.dart",
    "package:awesome_notifications/src/models/notification_channel.dart",
    "file:///E:/plugins/awesome_notifications/lib/src/utils/resource_image_provider.dart",
    "package:awesome_notifications/src/utils/resource_image_provider.dart",
    "file:///E:/plugins/awesome_notifications/lib/src/utils/bitmap_utils.dart",
    "package:awesome_notifications/src/utils/bitmap_utils.dart",
    "file:///E:/plugins/awesome_notifications/lib/src/models/notification_button.dart",
    "package:awesome_notifications/src/models/notification_button.dart",
    "file:///E:/plugins/awesome_notifications/lib/src/awesome_notifications_core.dart",
    "package:awesome_notifications/src/awesome_notifications_core.dart"
  ];
  var displayedLifeCycle = dart.privateName(received_notification, "ReceivedNotification.displayedLifeCycle");
  var createdSource = dart.privateName(received_notification, "ReceivedNotification.createdSource");
  var createdLifeCycle = dart.privateName(received_notification, "ReceivedNotification.createdLifeCycle");
  var displayedDate = dart.privateName(received_notification, "ReceivedNotification.displayedDate");
  var createdDate = dart.privateName(received_notification, "ReceivedNotification.createdDate");
  var id$ = dart.privateName(basic_notification_content, "BaseNotificationContent.id");
  var channelKey$ = dart.privateName(basic_notification_content, "BaseNotificationContent.channelKey");
  var title$ = dart.privateName(basic_notification_content, "BaseNotificationContent.title");
  var body$ = dart.privateName(basic_notification_content, "BaseNotificationContent.body");
  var summary$ = dart.privateName(basic_notification_content, "BaseNotificationContent.summary");
  var showWhen$ = dart.privateName(basic_notification_content, "BaseNotificationContent.showWhen");
  var payload$ = dart.privateName(basic_notification_content, "BaseNotificationContent.payload");
  var icon$ = dart.privateName(basic_notification_content, "BaseNotificationContent.icon");
  var largeIcon$ = dart.privateName(basic_notification_content, "BaseNotificationContent.largeIcon");
  var bigPicture$ = dart.privateName(basic_notification_content, "BaseNotificationContent.bigPicture");
  var customSound$ = dart.privateName(basic_notification_content, "BaseNotificationContent.customSound");
  var autoDismissible$ = dart.privateName(basic_notification_content, "BaseNotificationContent.autoDismissible");
  var color$ = dart.privateName(basic_notification_content, "BaseNotificationContent.color");
  var backgroundColor$ = dart.privateName(basic_notification_content, "BaseNotificationContent.backgroundColor");
  var privacy = dart.privateName(basic_notification_content, "BaseNotificationContent.privacy");
  basic_notification_content.BaseNotificationContent = class BaseNotificationContent extends model.Model {
    get id() {
      return this[id$];
    }
    set id(value) {
      this[id$] = value;
    }
    get channelKey() {
      return this[channelKey$];
    }
    set channelKey(value) {
      this[channelKey$] = value;
    }
    get title() {
      return this[title$];
    }
    set title(value) {
      this[title$] = value;
    }
    get body() {
      return this[body$];
    }
    set body(value) {
      this[body$] = value;
    }
    get summary() {
      return this[summary$];
    }
    set summary(value) {
      this[summary$] = value;
    }
    get showWhen() {
      return this[showWhen$];
    }
    set showWhen(value) {
      this[showWhen$] = value;
    }
    get payload() {
      return this[payload$];
    }
    set payload(value) {
      this[payload$] = value;
    }
    get icon() {
      return this[icon$];
    }
    set icon(value) {
      this[icon$] = value;
    }
    get largeIcon() {
      return this[largeIcon$];
    }
    set largeIcon(value) {
      this[largeIcon$] = value;
    }
    get bigPicture() {
      return this[bigPicture$];
    }
    set bigPicture(value) {
      this[bigPicture$] = value;
    }
    get customSound() {
      return this[customSound$];
    }
    set customSound(value) {
      this[customSound$] = value;
    }
    get autoDismissible() {
      return this[autoDismissible$];
    }
    set autoDismissible(value) {
      this[autoDismissible$] = value;
    }
    get color() {
      return this[color$];
    }
    set color(value) {
      this[color$] = value;
    }
    get backgroundColor() {
      return this[backgroundColor$];
    }
    set backgroundColor(value) {
      this[backgroundColor$] = value;
    }
    get privacy() {
      return this[privacy];
    }
    set privacy(value) {
      this[privacy] = value;
    }
    fromMap(mapData) {
      if (mapData == null) dart.nullFailed(I[1], 42, 57, "mapData");
      this.id = T.intN().as(assert_utils.AssertUtils.extractValue(core.int, mapData, "id"));
      this.channelKey = T.StringN().as(assert_utils.AssertUtils.extractValue(core.String, mapData, "channelKey"));
      this.title = T.StringN().as(assert_utils.AssertUtils.extractValue(core.String, mapData, "title"));
      this.body = T.StringN().as(assert_utils.AssertUtils.extractValue(core.String, mapData, "body"));
      this.summary = T.StringN().as(assert_utils.AssertUtils.extractValue(core.String, mapData, "summary"));
      this.showWhen = T.boolN().as(assert_utils.AssertUtils.extractValue(core.bool, mapData, "showWhen"));
      this.payload = T.MapNOfString$String().as(assert_utils.AssertUtils.extractMap(core.String, core.String, mapData, "payload"));
      this.icon = T.StringN().as(assert_utils.AssertUtils.extractValue(core.String, mapData, "icon"));
      this.largeIcon = T.StringN().as(assert_utils.AssertUtils.extractValue(core.String, mapData, "largeIcon"));
      this.bigPicture = T.StringN().as(assert_utils.AssertUtils.extractValue(core.String, mapData, "bigPicture"));
      this.customSound = T.StringN().as(assert_utils.AssertUtils.extractValue(core.String, mapData, "customSound"));
      this.autoDismissible = T.boolN().as(assert_utils.AssertUtils.extractValue(core.bool, mapData, "autoDismissible"));
      this.privacy = assert_utils.AssertUtils.extractEnum(notification_privacy.NotificationPrivacy, mapData, "privacy", notification_privacy.NotificationPrivacy.values);
      let colorValue = T.intN().as(assert_utils.AssertUtils.extractValue(core.int, mapData, "color"));
      this.color = colorValue == null ? null : new ui.Color.new(colorValue);
      let backgroundColorValue = T.intN().as(assert_utils.AssertUtils.extractValue(core.int, mapData, "backgroundColor"));
      this.backgroundColor = backgroundColorValue == null ? null : new ui.Color.new(backgroundColorValue);
      return this;
    }
    toMap() {
      let t0, t0$;
      return new (T.IdentityMapOfString$dynamic()).from(["id", this.id, "channelKey", this.channelKey, "title", this.title, "body", this.body, "summary", this.summary, "showWhen", this.showWhen, "icon", this.icon, "payload", this.payload, "largeIcon", this.largeIcon, "bigPicture", this.bigPicture, "customSound", this.customSound, "autoDismissible", this.autoDismissible, "privacy", assert_utils.AssertUtils.toSimpleEnumString(T.NotificationPrivacyN(), this.privacy), "color", (t0 = this.color, t0 == null ? null : t0.value), "backgroundColor", (t0$ = this.backgroundColor, t0$ == null ? null : t0$.value)]);
    }
    get bigPictureImage() {
      let t0, t0$;
      if (dart.test((t0$ = (t0 = this.bigPicture, t0 == null ? null : t0[$isEmpty]), t0$ == null ? true : t0$))) return null;
      return T.ImageProviderNOfObject().as(bitmap_utils.BitmapUtils.new().getFromMediaPath(dart.nullCheck(this.bigPicture)));
    }
    get largeIconImage() {
      let t0, t0$;
      if (dart.test((t0$ = (t0 = this.largeIcon, t0 == null ? null : t0[$isEmpty]), t0$ == null ? true : t0$))) return null;
      return T.ImageProviderNOfObject().as(bitmap_utils.BitmapUtils.new().getFromMediaPath(dart.nullCheck(this.largeIcon)));
    }
    get bigPicturePath() {
      let t0, t0$;
      if (dart.test((t0$ = (t0 = this.bigPicture, t0 == null ? null : t0[$isEmpty]), t0$ == null ? true : t0$))) return null;
      return bitmap_utils.BitmapUtils.new().cleanMediaPath(dart.nullCheck(this.bigPicture));
    }
    get largeIconPath() {
      let t0, t0$;
      if (dart.test((t0$ = (t0 = this.largeIcon, t0 == null ? null : t0[$isEmpty]), t0$ == null ? true : t0$))) return null;
      return bitmap_utils.BitmapUtils.new().cleanMediaPath(dart.nullCheck(this.largeIcon));
    }
    get titleWithoutHtml() {
      return dart.nullCheck(html_utils.HtmlUtils.removeAllHtmlTags(this.title));
    }
    get bodyWithoutHtml() {
      return dart.nullCheck(html_utils.HtmlUtils.removeAllHtmlTags(this.body));
    }
    validate() {
      if (!!dart.test(assert_utils.AssertUtils.isNullOrEmptyOrInvalid(dart.dynamic, this.id, dart.wrapType(core.int)))) dart.assertFailed(null, I[1], 116, 12, "!AssertUtils.isNullOrEmptyOrInvalid(id, int)");
      if (!!dart.test(assert_utils.AssertUtils.isNullOrEmptyOrInvalid(dart.dynamic, this.channelKey, dart.wrapType(core.String)))) dart.assertFailed(null, I[1], 117, 12, "!AssertUtils.isNullOrEmptyOrInvalid(channelKey, String)");
    }
  };
  (basic_notification_content.BaseNotificationContent.new = function(opts) {
    let id = opts && 'id' in opts ? opts.id : null;
    let channelKey = opts && 'channelKey' in opts ? opts.channelKey : null;
    let title = opts && 'title' in opts ? opts.title : null;
    let body = opts && 'body' in opts ? opts.body : null;
    let summary = opts && 'summary' in opts ? opts.summary : null;
    let showWhen = opts && 'showWhen' in opts ? opts.showWhen : null;
    let icon = opts && 'icon' in opts ? opts.icon : null;
    let largeIcon = opts && 'largeIcon' in opts ? opts.largeIcon : null;
    let bigPicture = opts && 'bigPicture' in opts ? opts.bigPicture : null;
    let autoDismissible = opts && 'autoDismissible' in opts ? opts.autoDismissible : null;
    let color = opts && 'color' in opts ? opts.color : null;
    let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
    let payload = opts && 'payload' in opts ? opts.payload : null;
    let customSound = opts && 'customSound' in opts ? opts.customSound : null;
    this[privacy] = null;
    this[id$] = id;
    this[channelKey$] = channelKey;
    this[title$] = title;
    this[body$] = body;
    this[summary$] = summary;
    this[showWhen$] = showWhen;
    this[icon$] = icon;
    this[largeIcon$] = largeIcon;
    this[bigPicture$] = bigPicture;
    this[autoDismissible$] = autoDismissible;
    this[color$] = color;
    this[backgroundColor$] = backgroundColor;
    this[payload$] = payload;
    this[customSound$] = customSound;
    basic_notification_content.BaseNotificationContent.__proto__.new.call(this);
    ;
  }).prototype = basic_notification_content.BaseNotificationContent.prototype;
  dart.addTypeTests(basic_notification_content.BaseNotificationContent);
  dart.addTypeCaches(basic_notification_content.BaseNotificationContent);
  dart.setMethodSignature(basic_notification_content.BaseNotificationContent, () => ({
    __proto__: dart.getMethods(basic_notification_content.BaseNotificationContent.__proto__),
    fromMap: dart.fnType(dart.nullable(basic_notification_content.BaseNotificationContent), [core.Map$(core.String, dart.dynamic)]),
    toMap: dart.fnType(core.Map$(core.String, dart.dynamic), []),
    validate: dart.fnType(dart.void, [])
  }));
  dart.setGetterSignature(basic_notification_content.BaseNotificationContent, () => ({
    __proto__: dart.getGetters(basic_notification_content.BaseNotificationContent.__proto__),
    bigPictureImage: dart.nullable(image_provider.ImageProvider$(core.Object)),
    largeIconImage: dart.nullable(image_provider.ImageProvider$(core.Object)),
    bigPicturePath: dart.nullable(core.String),
    largeIconPath: dart.nullable(core.String),
    titleWithoutHtml: dart.nullable(core.String),
    bodyWithoutHtml: dart.nullable(core.String)
  }));
  dart.setLibraryUri(basic_notification_content.BaseNotificationContent, I[2]);
  dart.setFieldSignature(basic_notification_content.BaseNotificationContent, () => ({
    __proto__: dart.getFields(basic_notification_content.BaseNotificationContent.__proto__),
    id: dart.fieldType(dart.nullable(core.int)),
    channelKey: dart.fieldType(dart.nullable(core.String)),
    title: dart.fieldType(dart.nullable(core.String)),
    body: dart.fieldType(dart.nullable(core.String)),
    summary: dart.fieldType(dart.nullable(core.String)),
    showWhen: dart.fieldType(dart.nullable(core.bool)),
    payload: dart.fieldType(dart.nullable(core.Map$(core.String, core.String))),
    icon: dart.fieldType(dart.nullable(core.String)),
    largeIcon: dart.fieldType(dart.nullable(core.String)),
    bigPicture: dart.fieldType(dart.nullable(core.String)),
    customSound: dart.fieldType(dart.nullable(core.String)),
    autoDismissible: dart.fieldType(dart.nullable(core.bool)),
    color: dart.fieldType(dart.nullable(ui.Color)),
    backgroundColor: dart.fieldType(dart.nullable(ui.Color)),
    privacy: dart.fieldType(dart.nullable(notification_privacy.NotificationPrivacy))
  }));
  received_notification.ReceivedNotification = class ReceivedNotification extends basic_notification_content.BaseNotificationContent {
    get displayedLifeCycle() {
      return this[displayedLifeCycle];
    }
    set displayedLifeCycle(value) {
      this[displayedLifeCycle] = value;
    }
    get createdSource() {
      return this[createdSource];
    }
    set createdSource(value) {
      this[createdSource] = value;
    }
    get createdLifeCycle() {
      return this[createdLifeCycle];
    }
    set createdLifeCycle(value) {
      this[createdLifeCycle] = value;
    }
    get displayedDate() {
      return this[displayedDate];
    }
    set displayedDate(value) {
      this[displayedDate] = value;
    }
    get createdDate() {
      return this[createdDate];
    }
    set createdDate(value) {
      this[createdDate] = value;
    }
    fromMap(dataMap) {
      if (dataMap == null) dart.nullFailed(I[0], 17, 53, "dataMap");
      super.fromMap(dataMap);
      this.createdSource = assert_utils.AssertUtils.extractEnum(notification_source.NotificationSource, dataMap, "createdSource", notification_source.NotificationSource.values);
      this.createdLifeCycle = assert_utils.AssertUtils.extractEnum(notification_life_cycle.NotificationLifeCycle, dataMap, "createdLifeCycle", notification_life_cycle.NotificationLifeCycle.values);
      this.displayedLifeCycle = assert_utils.AssertUtils.extractEnum(notification_life_cycle.NotificationLifeCycle, dataMap, "displayedLifeCycle", notification_life_cycle.NotificationLifeCycle.values);
      this.displayedDate = T.StringN().as(assert_utils.AssertUtils.extractValue(core.String, dataMap, "displayedDate"));
      this.createdDate = T.StringN().as(assert_utils.AssertUtils.extractValue(core.String, dataMap, "createdDate"));
      return this;
    }
    toMap() {
      let t0;
      let map = super.toMap();
      t0 = map;
      return (() => {
        t0[$addAll](new (T.IdentityMapOfString$dynamic()).from(["createdSource", assert_utils.AssertUtils.toSimpleEnumString(T.NotificationSourceN(), this.createdSource), "createdLifeCycle", assert_utils.AssertUtils.toSimpleEnumString(T.NotificationLifeCycleN(), this.createdLifeCycle), "displayedLifeCycle", assert_utils.AssertUtils.toSimpleEnumString(T.NotificationLifeCycleN(), this.displayedLifeCycle), "createdDate", this.createdDate, "displayedDate", this.displayedDate]));
        return t0;
      })();
    }
  };
  (received_notification.ReceivedNotification.new = function() {
    this[displayedLifeCycle] = null;
    this[createdSource] = null;
    this[createdLifeCycle] = null;
    this[displayedDate] = null;
    this[createdDate] = null;
    received_notification.ReceivedNotification.__proto__.new.call(this);
    ;
  }).prototype = received_notification.ReceivedNotification.prototype;
  dart.addTypeTests(received_notification.ReceivedNotification);
  dart.addTypeCaches(received_notification.ReceivedNotification);
  dart.setMethodSignature(received_notification.ReceivedNotification, () => ({
    __proto__: dart.getMethods(received_notification.ReceivedNotification.__proto__),
    fromMap: dart.fnType(received_notification.ReceivedNotification, [core.Map$(core.String, dart.dynamic)])
  }));
  dart.setLibraryUri(received_notification.ReceivedNotification, I[3]);
  dart.setFieldSignature(received_notification.ReceivedNotification, () => ({
    __proto__: dart.getFields(received_notification.ReceivedNotification.__proto__),
    displayedLifeCycle: dart.fieldType(dart.nullable(notification_life_cycle.NotificationLifeCycle)),
    createdSource: dart.fieldType(dart.nullable(notification_source.NotificationSource)),
    createdLifeCycle: dart.fieldType(dart.nullable(notification_life_cycle.NotificationLifeCycle)),
    displayedDate: dart.fieldType(dart.nullable(core.String)),
    createdDate: dart.fieldType(dart.nullable(core.String))
  }));
  var actionLifeCycle = dart.privateName(received_action, "ReceivedAction.actionLifeCycle");
  var dismissedLifeCycle = dart.privateName(received_action, "ReceivedAction.dismissedLifeCycle");
  var buttonKeyPressed = dart.privateName(received_action, "ReceivedAction.buttonKeyPressed");
  var buttonKeyInput = dart.privateName(received_action, "ReceivedAction.buttonKeyInput");
  var actionDate = dart.privateName(received_action, "ReceivedAction.actionDate");
  var dismissedDate = dart.privateName(received_action, "ReceivedAction.dismissedDate");
  received_action.ReceivedAction = class ReceivedAction extends received_notification.ReceivedNotification {
    get actionLifeCycle() {
      return this[actionLifeCycle];
    }
    set actionLifeCycle(value) {
      this[actionLifeCycle] = value;
    }
    get dismissedLifeCycle() {
      return this[dismissedLifeCycle];
    }
    set dismissedLifeCycle(value) {
      this[dismissedLifeCycle] = value;
    }
    get buttonKeyPressed() {
      return this[buttonKeyPressed];
    }
    set buttonKeyPressed(value) {
      this[buttonKeyPressed] = value;
    }
    get buttonKeyInput() {
      return this[buttonKeyInput];
    }
    set buttonKeyInput(value) {
      this[buttonKeyInput] = value;
    }
    get actionDate() {
      return this[actionDate];
    }
    set actionDate(value) {
      this[actionDate] = value;
    }
    get dismissedDate() {
      return this[dismissedDate];
    }
    set dismissedDate(value) {
      this[dismissedDate] = value;
    }
    fromMap(dataMap) {
      let t0, t0$;
      if (dataMap == null) dart.nullFailed(I[4], 17, 53, "dataMap");
      super.fromMap(dataMap);
      this.actionLifeCycle = assert_utils.AssertUtils.extractEnum(notification_life_cycle.NotificationLifeCycle, dataMap, "actionLifeCycle", notification_life_cycle.NotificationLifeCycle.values);
      this.dismissedLifeCycle = assert_utils.AssertUtils.extractEnum(notification_life_cycle.NotificationLifeCycle, dataMap, "dismissedLifeCycle", notification_life_cycle.NotificationLifeCycle.values);
      this.actionDate = T.StringN().as(assert_utils.AssertUtils.extractValue(core.String, dataMap, "actionDate"));
      this.dismissedDate = T.StringN().as(assert_utils.AssertUtils.extractValue(core.String, dataMap, "dismissedDate"));
      this.buttonKeyPressed = core.String.as((t0 = assert_utils.AssertUtils.extractValue(core.String, dataMap, "buttonKeyPressed"), t0 == null ? "" : t0));
      this.buttonKeyInput = core.String.as((t0$ = assert_utils.AssertUtils.extractValue(core.String, dataMap, "buttonKeyInput"), t0$ == null ? "" : t0$));
      return this;
    }
    toMap() {
      let t0;
      let map = super.toMap();
      t0 = map;
      return (() => {
        t0[$addAll](new (T.IdentityMapOfString$dynamic()).from(["actionDate", this.actionDate, "dismissedDate", this.dismissedDate, "actionLifeCycle", assert_utils.AssertUtils.toSimpleEnumString(T.NotificationLifeCycleN(), this.actionLifeCycle), "dismissedLifeCycle", assert_utils.AssertUtils.toSimpleEnumString(T.NotificationLifeCycleN(), this.dismissedLifeCycle), "buttonKeyPressed", this.buttonKeyPressed, "buttonKeyInput", this.buttonKeyInput]));
        return t0;
      })();
    }
  };
  (received_action.ReceivedAction.new = function() {
    this[actionLifeCycle] = null;
    this[dismissedLifeCycle] = null;
    this[buttonKeyPressed] = "";
    this[buttonKeyInput] = "";
    this[actionDate] = null;
    this[dismissedDate] = null;
    received_action.ReceivedAction.__proto__.new.call(this);
    ;
  }).prototype = received_action.ReceivedAction.prototype;
  dart.addTypeTests(received_action.ReceivedAction);
  dart.addTypeCaches(received_action.ReceivedAction);
  dart.setLibraryUri(received_action.ReceivedAction, I[5]);
  dart.setFieldSignature(received_action.ReceivedAction, () => ({
    __proto__: dart.getFields(received_action.ReceivedAction.__proto__),
    actionLifeCycle: dart.fieldType(dart.nullable(notification_life_cycle.NotificationLifeCycle)),
    dismissedLifeCycle: dart.fieldType(dart.nullable(notification_life_cycle.NotificationLifeCycle)),
    buttonKeyPressed: dart.fieldType(core.String),
    buttonKeyInput: dart.fieldType(core.String),
    actionDate: dart.fieldType(dart.nullable(core.String)),
    dismissedDate: dart.fieldType(dart.nullable(core.String))
  }));
  var content$ = dart.privateName(push_notification, "NotificationModel.content");
  var schedule$ = dart.privateName(push_notification, "NotificationModel.schedule");
  var actionButtons$ = dart.privateName(push_notification, "NotificationModel.actionButtons");
  push_notification.NotificationModel = class NotificationModel extends model.Model {
    get content() {
      return this[content$];
    }
    set content(value) {
      this[content$] = value;
    }
    get schedule() {
      return this[schedule$];
    }
    set schedule(value) {
      this[schedule$] = value;
    }
    get actionButtons() {
      return this[actionButtons$];
    }
    set actionButtons(value) {
      this[actionButtons$] = value;
    }
    fromMap(mapData) {
      let t0;
      if (mapData == null) dart.nullFailed(I[6], 19, 50, "mapData");
      try {
        if (!(dart.test(mapData[$containsKey]("content")) && core.Map.is(mapData[$_get]("content")))) dart.assertFailed(null, I[6], 21, 14, "mapData.containsKey('content') && mapData['content'] is Map");
        let contentData = T.LinkedHashMapOfString$dynamic().from(core.Map.as(mapData[$_get]("content")));
        this.content = new notification_content.NotificationContent.new().fromMap(contentData);
        if (this.content == null) return null;
        dart.nullCheck(this.content).validate();
        if (dart.test(mapData[$containsKey]("schedule"))) {
          let scheduleData = T.LinkedHashMapOfString$dynamic().from(core.Map.as(mapData[$_get]("schedule")));
          if (dart.test(scheduleData[$containsKey]("interval"))) {
            this.schedule = new notification_interval.NotificationInterval.new().fromMap(scheduleData);
          } else {
            this.schedule = new notification_calendar.NotificationCalendar.new().fromMap(scheduleData);
          }
          t0 = this.schedule;
          t0 == null ? null : t0.validate();
        }
        if (dart.test(mapData[$containsKey]("actionButtons"))) {
          this.actionButtons = T.JSArrayOfNotificationActionButton().of([]);
          let actionButtonsData = core.List.from(core.Iterable.as(mapData[$_get]("actionButtons")));
          for (let buttonData of actionButtonsData) {
            let actionButtonData = T.LinkedHashMapOfString$dynamic().from(core.Map.as(buttonData));
            let button = dart.nullCast(new notification_button.NotificationActionButton.new().fromMap(actionButtonData), notification_button.NotificationActionButton);
            button.validate();
            dart.nullCheck(this.actionButtons)[$add](button);
          }
          if (!dart.test(dart.nullCheck(this.actionButtons)[$isNotEmpty])) dart.assertFailed(null, I[6], 58, 16, "actionButtons!.isNotEmpty");
        }
      } catch (e$) {
        let e = dart.getThrown(e$);
        if (core.Object.is(e)) {
          return null;
        } else
          throw e$;
      }
      return this;
    }
    toMap() {
      let t1, t1$, t1$0, t1$1;
      let actionButtonsData = T.JSArrayOfMapOfString$dynamic().of([]);
      if (this.actionButtons != null) {
        for (let button of dart.nullCheck(this.actionButtons)) {
          let data = button.toMap();
          if (dart.test(data[$isNotEmpty])) actionButtonsData[$add](data);
        }
      }
      return new (T.IdentityMapOfString$dynamic()).from(["content", (t1$ = (t1 = this.content, t1 == null ? null : t1.toMap()), t1$ == null ? new _js_helper.LinkedMap.new() : t1$), "schedule", (t1$1 = (t1$0 = this.schedule, t1$0 == null ? null : t1$0.toMap()), t1$1 == null ? new _js_helper.LinkedMap.new() : t1$1), "actionButtons", dart.test(actionButtonsData[$isEmpty]) ? null : actionButtonsData]);
    }
    validate() {
      if (!(this.content != null)) dart.assertFailed(null, I[6], 87, 12, "content != null");
    }
  };
  (push_notification.NotificationModel.new = function(opts) {
    let content = opts && 'content' in opts ? opts.content : null;
    let schedule = opts && 'schedule' in opts ? opts.schedule : null;
    let actionButtons = opts && 'actionButtons' in opts ? opts.actionButtons : null;
    this[content$] = content;
    this[schedule$] = schedule;
    this[actionButtons$] = actionButtons;
    push_notification.NotificationModel.__proto__.new.call(this);
    ;
  }).prototype = push_notification.NotificationModel.prototype;
  dart.addTypeTests(push_notification.NotificationModel);
  dart.addTypeCaches(push_notification.NotificationModel);
  dart.setMethodSignature(push_notification.NotificationModel, () => ({
    __proto__: dart.getMethods(push_notification.NotificationModel.__proto__),
    fromMap: dart.fnType(dart.nullable(push_notification.NotificationModel), [core.Map$(core.String, dart.dynamic)]),
    toMap: dart.fnType(core.Map$(core.String, dart.dynamic), []),
    validate: dart.fnType(dart.void, [])
  }));
  dart.setLibraryUri(push_notification.NotificationModel, I[7]);
  dart.setFieldSignature(push_notification.NotificationModel, () => ({
    __proto__: dart.getFields(push_notification.NotificationModel.__proto__),
    content: dart.fieldType(dart.nullable(notification_content.NotificationContent)),
    schedule: dart.fieldType(dart.nullable(notification_schedule.NotificationSchedule)),
    actionButtons: dart.fieldType(dart.nullable(core.List$(notification_button.NotificationActionButton)))
  }));
  var hideLargeIconOnExpand$ = dart.privateName(notification_content, "NotificationContent.hideLargeIconOnExpand");
  var progress$ = dart.privateName(notification_content, "NotificationContent.progress");
  var ticker$ = dart.privateName(notification_content, "NotificationContent.ticker");
  var displayedLifeCycle$ = dart.privateName(notification_content, "NotificationContent.displayedLifeCycle");
  var createdSource$ = dart.privateName(notification_content, "NotificationContent.createdSource");
  var createdLifeCycle$ = dart.privateName(notification_content, "NotificationContent.createdLifeCycle");
  var notificationLayout$ = dart.privateName(notification_content, "NotificationContent.notificationLayout");
  var displayOnForeground$ = dart.privateName(notification_content, "NotificationContent.displayOnForeground");
  var displayOnBackground$ = dart.privateName(notification_content, "NotificationContent.displayOnBackground");
  var createdDate$ = dart.privateName(notification_content, "NotificationContent.createdDate");
  var displayedDate$ = dart.privateName(notification_content, "NotificationContent.displayedDate");
  var locked$ = dart.privateName(notification_content, "NotificationContent.locked");
  notification_content.NotificationContent = class NotificationContent extends basic_notification_content.BaseNotificationContent {
    get hideLargeIconOnExpand() {
      return this[hideLargeIconOnExpand$];
    }
    set hideLargeIconOnExpand(value) {
      this[hideLargeIconOnExpand$] = value;
    }
    get progress() {
      return this[progress$];
    }
    set progress(value) {
      this[progress$] = value;
    }
    get ticker() {
      return this[ticker$];
    }
    set ticker(value) {
      this[ticker$] = value;
    }
    get displayedLifeCycle() {
      return this[displayedLifeCycle$];
    }
    set displayedLifeCycle(value) {
      this[displayedLifeCycle$] = value;
    }
    get createdSource() {
      return this[createdSource$];
    }
    set createdSource(value) {
      this[createdSource$] = value;
    }
    get createdLifeCycle() {
      return this[createdLifeCycle$];
    }
    set createdLifeCycle(value) {
      this[createdLifeCycle$] = value;
    }
    get notificationLayout() {
      return this[notificationLayout$];
    }
    set notificationLayout(value) {
      this[notificationLayout$] = value;
    }
    get displayOnForeground() {
      return this[displayOnForeground$];
    }
    set displayOnForeground(value) {
      this[displayOnForeground$] = value;
    }
    get displayOnBackground() {
      return this[displayOnBackground$];
    }
    set displayOnBackground(value) {
      this[displayOnBackground$] = value;
    }
    get createdDate() {
      return this[createdDate$];
    }
    set createdDate(value) {
      this[createdDate$] = value;
    }
    get displayedDate() {
      return this[displayedDate$];
    }
    set displayedDate(value) {
      this[displayedDate$] = value;
    }
    get locked() {
      return this[locked$];
    }
    set locked(value) {
      this[locked$] = value;
    }
    fromMap(mapData) {
      if (mapData == null) dart.nullFailed(I[8], 74, 53, "mapData");
      super.fromMap(mapData);
      this.hideLargeIconOnExpand = T.boolN().as(assert_utils.AssertUtils.extractValue(dart.dynamic, mapData, "hideLargeIconOnExpand"));
      this.progress = T.intN().as(assert_utils.AssertUtils.extractValue(dart.dynamic, mapData, "progress"));
      this.ticker = T.StringN().as(assert_utils.AssertUtils.extractValue(dart.dynamic, mapData, "ticker"));
      this.locked = T.boolN().as(assert_utils.AssertUtils.extractValue(dart.dynamic, mapData, "locked"));
      this.notificationLayout = assert_utils.AssertUtils.extractEnum(notification_layout.NotificationLayout, mapData, "notificationLayout", notification_layout.NotificationLayout.values);
      this.displayedLifeCycle = assert_utils.AssertUtils.extractEnum(notification_life_cycle.NotificationLifeCycle, mapData, "displayedLifeCycle", notification_life_cycle.NotificationLifeCycle.values);
      this.createdSource = assert_utils.AssertUtils.extractEnum(notification_source.NotificationSource, mapData, "createdSource", notification_source.NotificationSource.values);
      this.createdLifeCycle = assert_utils.AssertUtils.extractEnum(notification_life_cycle.NotificationLifeCycle, mapData, "createdLifeCycle", notification_life_cycle.NotificationLifeCycle.values);
      this.createdDate = T.StringN().as(assert_utils.AssertUtils.extractValue(core.String, mapData, "createdDate"));
      this.displayOnForeground = T.boolN().as(assert_utils.AssertUtils.extractValue(core.bool, mapData, "displayOnForeground"));
      this.displayOnBackground = T.boolN().as(assert_utils.AssertUtils.extractValue(core.bool, mapData, "displayOnBackground"));
      this.displayedDate = T.StringN().as(assert_utils.AssertUtils.extractValue(core.String, mapData, "displayedDate"));
      try {
        this.validate();
      } catch (e$) {
        let e = dart.getThrown(e$);
        if (core.Object.is(e)) {
          return null;
        } else
          throw e$;
      }
      return this;
    }
    toMap() {
      let t2;
      let dataMap = super.toMap();
      let actionButtonList = [];
      dataMap = (t2 = dataMap, (() => {
        t2[$addAll](new (T.IdentityMapOfString$dynamic()).from(["hideLargeIconOnExpand", this.hideLargeIconOnExpand, "progress", this.progress, "ticker", this.ticker, "locked", this.locked, "actionButtons", dart.notNull(actionButtonList[$length]) > 0 ? actionButtonList : null, "notificationLayout", assert_utils.AssertUtils.toSimpleEnumString(T.NotificationLayoutN(), this.notificationLayout), "createdSource", assert_utils.AssertUtils.toSimpleEnumString(T.NotificationSourceN(), this.createdSource), "createdLifeCycle", assert_utils.AssertUtils.toSimpleEnumString(T.NotificationLifeCycleN(), this.createdLifeCycle), "displayedLifeCycle", assert_utils.AssertUtils.toSimpleEnumString(T.NotificationLifeCycleN(), this.displayedLifeCycle), "displayOnForeground", this.displayOnForeground, "displayOnBackground", this.displayOnBackground, "createdDate", this.createdDate, "displayedDate", this.displayedDate]));
        return t2;
      })());
      return dataMap;
    }
    toString() {
      return dart.toString(this.toMap())[$replaceAll](",", ",\n");
    }
  };
  (notification_content.NotificationContent.new = function(opts) {
    let id = opts && 'id' in opts ? opts.id : null;
    let channelKey = opts && 'channelKey' in opts ? opts.channelKey : null;
    let title = opts && 'title' in opts ? opts.title : null;
    let body = opts && 'body' in opts ? opts.body : null;
    let summary = opts && 'summary' in opts ? opts.summary : null;
    let showWhen = opts && 'showWhen' in opts ? opts.showWhen : null;
    let icon = opts && 'icon' in opts ? opts.icon : null;
    let largeIcon = opts && 'largeIcon' in opts ? opts.largeIcon : null;
    let bigPicture = opts && 'bigPicture' in opts ? opts.bigPicture : null;
    let customSound = opts && 'customSound' in opts ? opts.customSound : null;
    let autoDismissible = opts && 'autoDismissible' in opts ? opts.autoDismissible : null;
    let color = opts && 'color' in opts ? opts.color : null;
    let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
    let payload = opts && 'payload' in opts ? opts.payload : null;
    let notificationLayout = opts && 'notificationLayout' in opts ? opts.notificationLayout : null;
    let hideLargeIconOnExpand = opts && 'hideLargeIconOnExpand' in opts ? opts.hideLargeIconOnExpand : null;
    let locked = opts && 'locked' in opts ? opts.locked : null;
    let progress = opts && 'progress' in opts ? opts.progress : null;
    let ticker = opts && 'ticker' in opts ? opts.ticker : null;
    let createdSource = opts && 'createdSource' in opts ? opts.createdSource : null;
    let createdLifeCycle = opts && 'createdLifeCycle' in opts ? opts.createdLifeCycle : null;
    let displayedLifeCycle = opts && 'displayedLifeCycle' in opts ? opts.displayedLifeCycle : null;
    let createdDate = opts && 'createdDate' in opts ? opts.createdDate : null;
    let displayOnForeground = opts && 'displayOnForeground' in opts ? opts.displayOnForeground : null;
    let displayOnBackground = opts && 'displayOnBackground' in opts ? opts.displayOnBackground : null;
    let displayedDate = opts && 'displayedDate' in opts ? opts.displayedDate : null;
    this[notificationLayout$] = notificationLayout;
    this[hideLargeIconOnExpand$] = hideLargeIconOnExpand;
    this[locked$] = locked;
    this[progress$] = progress;
    this[ticker$] = ticker;
    this[createdSource$] = createdSource;
    this[createdLifeCycle$] = createdLifeCycle;
    this[displayedLifeCycle$] = displayedLifeCycle;
    this[createdDate$] = createdDate;
    this[displayOnForeground$] = displayOnForeground;
    this[displayOnBackground$] = displayOnBackground;
    this[displayedDate$] = displayedDate;
    notification_content.NotificationContent.__proto__.new.call(this, {id: id, channelKey: channelKey, title: title, body: body, summary: summary, showWhen: showWhen, payload: payload, icon: icon, largeIcon: largeIcon, bigPicture: bigPicture, customSound: customSound, autoDismissible: autoDismissible, color: color, backgroundColor: backgroundColor});
    ;
  }).prototype = notification_content.NotificationContent.prototype;
  dart.addTypeTests(notification_content.NotificationContent);
  dart.addTypeCaches(notification_content.NotificationContent);
  dart.setMethodSignature(notification_content.NotificationContent, () => ({
    __proto__: dart.getMethods(notification_content.NotificationContent.__proto__),
    fromMap: dart.fnType(dart.nullable(notification_content.NotificationContent), [core.Map$(core.String, dart.dynamic)])
  }));
  dart.setLibraryUri(notification_content.NotificationContent, I[9]);
  dart.setFieldSignature(notification_content.NotificationContent, () => ({
    __proto__: dart.getFields(notification_content.NotificationContent.__proto__),
    hideLargeIconOnExpand: dart.fieldType(dart.nullable(core.bool)),
    progress: dart.fieldType(dart.nullable(core.int)),
    ticker: dart.fieldType(dart.nullable(core.String)),
    displayedLifeCycle: dart.fieldType(dart.nullable(notification_life_cycle.NotificationLifeCycle)),
    createdSource: dart.fieldType(dart.nullable(notification_source.NotificationSource)),
    createdLifeCycle: dart.fieldType(dart.nullable(notification_life_cycle.NotificationLifeCycle)),
    notificationLayout: dart.fieldType(dart.nullable(notification_layout.NotificationLayout)),
    displayOnForeground: dart.fieldType(dart.nullable(core.bool)),
    displayOnBackground: dart.fieldType(dart.nullable(core.bool)),
    createdDate: dart.fieldType(dart.nullable(core.String)),
    displayedDate: dart.fieldType(dart.nullable(core.String)),
    locked: dart.fieldType(dart.nullable(core.bool))
  }));
  dart.defineExtensionMethods(notification_content.NotificationContent, ['toString']);
  var channelKey$0 = dart.privateName(notification_channel, "NotificationChannel.channelKey");
  var channelName$ = dart.privateName(notification_channel, "NotificationChannel.channelName");
  var channelDescription$ = dart.privateName(notification_channel, "NotificationChannel.channelDescription");
  var channelShowBadge$ = dart.privateName(notification_channel, "NotificationChannel.channelShowBadge");
  var importance$ = dart.privateName(notification_channel, "NotificationChannel.importance");
  var playSound$ = dart.privateName(notification_channel, "NotificationChannel.playSound");
  var soundSource$ = dart.privateName(notification_channel, "NotificationChannel.soundSource");
  var defaultRingtoneType$ = dart.privateName(notification_channel, "NotificationChannel.defaultRingtoneType");
  var enableVibration$ = dart.privateName(notification_channel, "NotificationChannel.enableVibration");
  var vibrationPattern$ = dart.privateName(notification_channel, "NotificationChannel.vibrationPattern");
  var enableLights$ = dart.privateName(notification_channel, "NotificationChannel.enableLights");
  var ledColor$ = dart.privateName(notification_channel, "NotificationChannel.ledColor");
  var ledOnMs$ = dart.privateName(notification_channel, "NotificationChannel.ledOnMs");
  var ledOffMs$ = dart.privateName(notification_channel, "NotificationChannel.ledOffMs");
  var groupKey$ = dart.privateName(notification_channel, "NotificationChannel.groupKey");
  var groupSort$ = dart.privateName(notification_channel, "NotificationChannel.groupSort");
  var groupAlertBehavior$ = dart.privateName(notification_channel, "NotificationChannel.groupAlertBehavior");
  var defaultPrivacy$ = dart.privateName(notification_channel, "NotificationChannel.defaultPrivacy");
  var icon$0 = dart.privateName(notification_channel, "NotificationChannel.icon");
  var defaultColor$ = dart.privateName(notification_channel, "NotificationChannel.defaultColor");
  var locked$0 = dart.privateName(notification_channel, "NotificationChannel.locked");
  var onlyAlertOnce$ = dart.privateName(notification_channel, "NotificationChannel.onlyAlertOnce");
  notification_channel.NotificationChannel = class NotificationChannel extends model.Model {
    get channelKey() {
      return this[channelKey$0];
    }
    set channelKey(value) {
      this[channelKey$0] = value;
    }
    get channelName() {
      return this[channelName$];
    }
    set channelName(value) {
      this[channelName$] = value;
    }
    get channelDescription() {
      return this[channelDescription$];
    }
    set channelDescription(value) {
      this[channelDescription$] = value;
    }
    get channelShowBadge() {
      return this[channelShowBadge$];
    }
    set channelShowBadge(value) {
      this[channelShowBadge$] = value;
    }
    get importance() {
      return this[importance$];
    }
    set importance(value) {
      this[importance$] = value;
    }
    get playSound() {
      return this[playSound$];
    }
    set playSound(value) {
      this[playSound$] = value;
    }
    get soundSource() {
      return this[soundSource$];
    }
    set soundSource(value) {
      this[soundSource$] = value;
    }
    get defaultRingtoneType() {
      return this[defaultRingtoneType$];
    }
    set defaultRingtoneType(value) {
      this[defaultRingtoneType$] = value;
    }
    get enableVibration() {
      return this[enableVibration$];
    }
    set enableVibration(value) {
      this[enableVibration$] = value;
    }
    get vibrationPattern() {
      return this[vibrationPattern$];
    }
    set vibrationPattern(value) {
      this[vibrationPattern$] = value;
    }
    get enableLights() {
      return this[enableLights$];
    }
    set enableLights(value) {
      this[enableLights$] = value;
    }
    get ledColor() {
      return this[ledColor$];
    }
    set ledColor(value) {
      this[ledColor$] = value;
    }
    get ledOnMs() {
      return this[ledOnMs$];
    }
    set ledOnMs(value) {
      this[ledOnMs$] = value;
    }
    get ledOffMs() {
      return this[ledOffMs$];
    }
    set ledOffMs(value) {
      this[ledOffMs$] = value;
    }
    get groupKey() {
      return this[groupKey$];
    }
    set groupKey(value) {
      this[groupKey$] = value;
    }
    get groupSort() {
      return this[groupSort$];
    }
    set groupSort(value) {
      this[groupSort$] = value;
    }
    get groupAlertBehavior() {
      return this[groupAlertBehavior$];
    }
    set groupAlertBehavior(value) {
      this[groupAlertBehavior$] = value;
    }
    get defaultPrivacy() {
      return this[defaultPrivacy$];
    }
    set defaultPrivacy(value) {
      this[defaultPrivacy$] = value;
    }
    get icon() {
      return this[icon$0];
    }
    set icon(value) {
      this[icon$0] = value;
    }
    get defaultColor() {
      return this[defaultColor$];
    }
    set defaultColor(value) {
      this[defaultColor$] = value;
    }
    get locked() {
      return this[locked$0];
    }
    set locked(value) {
      this[locked$0] = value;
    }
    get onlyAlertOnce() {
      return this[onlyAlertOnce$];
    }
    set onlyAlertOnce(value) {
      this[onlyAlertOnce$] = value;
    }
    toMap() {
      let t2, t2$;
      return new (T.IdentityMapOfString$dynamic()).from(["icon", this.icon, "channelKey", this.channelKey, "channelName", this.channelName, "channelDescription", this.channelDescription, "channelShowBadge", this.channelShowBadge, "importance", assert_utils.AssertUtils.toSimpleEnumString(T.NotificationImportanceN(), this.importance), "playSound", this.playSound, "soundSource", this.soundSource, "enableVibration", this.enableVibration, "vibrationPattern", this.vibrationPattern, "enableLights", this.enableLights, "defaultColor", (t2 = this.defaultColor, t2 == null ? null : t2.value), "ledColor", (t2$ = this.ledColor, t2$ == null ? null : t2$.value), "ledOnMs", this.ledOnMs, "ledOffMs", this.ledOffMs, "groupKey", this.groupKey, "groupSort", assert_utils.AssertUtils.toSimpleEnumString(T.GroupSortN(), this.groupSort), "groupAlertBehavior", assert_utils.AssertUtils.toSimpleEnumString(T.GroupAlertBehaviorN(), this.groupAlertBehavior), "defaultPrivacy", assert_utils.AssertUtils.toSimpleEnumString(T.NotificationPrivacyN(), this.defaultPrivacy), "defaultRingtoneType", assert_utils.AssertUtils.toSimpleEnumString(T.DefaultRingtoneTypeN(), this.defaultRingtoneType), "locked", this.locked, "onlyAlertOnce", this.onlyAlertOnce]);
    }
    fromMap(dataMap) {
      if (dataMap == null) dart.nullFailed(I[10], 148, 52, "dataMap");
      this.channelKey = T.StringN().as(assert_utils.AssertUtils.extractValue(dart.dynamic, dataMap, "channelKey"));
      this.channelName = T.StringN().as(assert_utils.AssertUtils.extractValue(dart.dynamic, dataMap, "channelName"));
      this.channelDescription = T.StringN().as(assert_utils.AssertUtils.extractValue(dart.dynamic, dataMap, "channelDescription"));
      this.channelShowBadge = T.boolN().as(assert_utils.AssertUtils.extractValue(dart.dynamic, dataMap, "channelShowBadge"));
      this.importance = assert_utils.AssertUtils.extractEnum(notification_importance.NotificationImportance, dataMap, "importance", notification_importance.NotificationImportance.values);
      this.playSound = T.boolN().as(assert_utils.AssertUtils.extractValue(dart.dynamic, dataMap, "playSound"));
      this.soundSource = T.StringN().as(assert_utils.AssertUtils.extractValue(dart.dynamic, dataMap, "soundPath"));
      this.enableVibration = T.boolN().as(assert_utils.AssertUtils.extractValue(dart.dynamic, dataMap, "enableVibration"));
      this.vibrationPattern = T.Int64ListN().as(assert_utils.AssertUtils.extractValue(dart.dynamic, dataMap, "vibrationPattern"));
      this.enableLights = T.boolN().as(assert_utils.AssertUtils.extractValue(dart.dynamic, dataMap, "enableLights"));
      this.groupKey = T.StringN().as(assert_utils.AssertUtils.extractValue(dart.dynamic, dataMap, "groupKey"));
      this.groupSort = assert_utils.AssertUtils.extractEnum(group_sort.GroupSort, dataMap, "groupSort", group_sort.GroupSort.values);
      this.groupAlertBehavior = assert_utils.AssertUtils.extractEnum(group_alert_behaviour.GroupAlertBehavior, dataMap, "groupAlertBehavior", group_alert_behaviour.GroupAlertBehavior.values);
      this.defaultPrivacy = assert_utils.AssertUtils.extractEnum(notification_privacy.NotificationPrivacy, dataMap, "defaultPrivacy", notification_privacy.NotificationPrivacy.values);
      this.defaultRingtoneType = assert_utils.AssertUtils.extractEnum(default_ringtone_type.DefaultRingtoneType, dataMap, "defaultRingtoneType", default_ringtone_type.DefaultRingtoneType.values);
      this.icon = T.StringN().as(assert_utils.AssertUtils.extractValue(dart.dynamic, dataMap, "icon"));
      this.locked = T.boolN().as(assert_utils.AssertUtils.extractValue(dart.dynamic, dataMap, "locked"));
      this.onlyAlertOnce = T.boolN().as(assert_utils.AssertUtils.extractValue(dart.dynamic, dataMap, "onlyAlertOnce"));
      let defaultColorValue = core.int.as(assert_utils.AssertUtils.extractValue(dart.dynamic, dataMap, "defaultColor"));
      this.defaultColor = this.defaultColor == null ? null : new ui.Color.new(defaultColorValue);
      let ledColorValue = core.int.as(assert_utils.AssertUtils.extractValue(dart.dynamic, dataMap, "ledColor"));
      this.ledColor = this.defaultColor == null ? null : new ui.Color.new(ledColorValue);
      this.ledOnMs = T.intN().as(assert_utils.AssertUtils.extractValue(dart.dynamic, dataMap, "ledOnMs"));
      this.ledOffMs = T.intN().as(assert_utils.AssertUtils.extractValue(dart.dynamic, dataMap, "ledOffMs"));
      return this;
    }
    validate() {
      if (!!dart.test(assert_utils.AssertUtils.isNullOrEmptyOrInvalid(dart.dynamic, this.channelKey, dart.wrapType(core.String)))) dart.assertFailed(null, I[10], 190, 12, "!AssertUtils.isNullOrEmptyOrInvalid(channelKey, String)");
      if (!!dart.test(assert_utils.AssertUtils.isNullOrEmptyOrInvalid(dart.dynamic, this.channelName, dart.wrapType(core.String)))) dart.assertFailed(null, I[10], 191, 12, "!AssertUtils.isNullOrEmptyOrInvalid(channelName, String)");
      if (!!dart.test(assert_utils.AssertUtils.isNullOrEmptyOrInvalid(dart.dynamic, this.channelDescription, dart.wrapType(core.String)))) dart.assertFailed(null, I[10], 192, 12, "!AssertUtils.isNullOrEmptyOrInvalid(channelDescription, String)");
    }
  };
  (notification_channel.NotificationChannel.new = function(opts) {
    let channelKey = opts && 'channelKey' in opts ? opts.channelKey : null;
    let channelName = opts && 'channelName' in opts ? opts.channelName : null;
    let channelDescription = opts && 'channelDescription' in opts ? opts.channelDescription : null;
    let channelShowBadge = opts && 'channelShowBadge' in opts ? opts.channelShowBadge : null;
    let importance = opts && 'importance' in opts ? opts.importance : null;
    let playSound = opts && 'playSound' in opts ? opts.playSound : null;
    let soundSource = opts && 'soundSource' in opts ? opts.soundSource : null;
    let defaultRingtoneType = opts && 'defaultRingtoneType' in opts ? opts.defaultRingtoneType : null;
    let enableVibration = opts && 'enableVibration' in opts ? opts.enableVibration : null;
    let vibrationPattern = opts && 'vibrationPattern' in opts ? opts.vibrationPattern : null;
    let enableLights = opts && 'enableLights' in opts ? opts.enableLights : null;
    let ledColor = opts && 'ledColor' in opts ? opts.ledColor : null;
    let ledOnMs = opts && 'ledOnMs' in opts ? opts.ledOnMs : null;
    let ledOffMs = opts && 'ledOffMs' in opts ? opts.ledOffMs : null;
    let groupKey = opts && 'groupKey' in opts ? opts.groupKey : null;
    let groupSort = opts && 'groupSort' in opts ? opts.groupSort : null;
    let groupAlertBehavior = opts && 'groupAlertBehavior' in opts ? opts.groupAlertBehavior : null;
    let icon = opts && 'icon' in opts ? opts.icon : null;
    let defaultColor = opts && 'defaultColor' in opts ? opts.defaultColor : null;
    let locked = opts && 'locked' in opts ? opts.locked : null;
    let onlyAlertOnce = opts && 'onlyAlertOnce' in opts ? opts.onlyAlertOnce : null;
    let defaultPrivacy = opts && 'defaultPrivacy' in opts ? opts.defaultPrivacy : null;
    this[channelKey$0] = channelKey;
    this[channelName$] = channelName;
    this[channelDescription$] = channelDescription;
    this[channelShowBadge$] = channelShowBadge;
    this[importance$] = importance;
    this[playSound$] = playSound;
    this[soundSource$] = soundSource;
    this[defaultRingtoneType$] = defaultRingtoneType;
    this[enableVibration$] = enableVibration;
    this[vibrationPattern$] = vibrationPattern;
    this[enableLights$] = enableLights;
    this[ledColor$] = ledColor;
    this[ledOnMs$] = ledOnMs;
    this[ledOffMs$] = ledOffMs;
    this[groupKey$] = groupKey;
    this[groupSort$] = groupSort;
    this[groupAlertBehavior$] = groupAlertBehavior;
    this[icon$0] = icon;
    this[defaultColor$] = defaultColor;
    this[locked$0] = locked;
    this[onlyAlertOnce$] = onlyAlertOnce;
    this[defaultPrivacy$] = defaultPrivacy;
    notification_channel.NotificationChannel.__proto__.new.call(this);
    this.channelKey = T.StringN().as(assert_utils.AssertUtils.getValueOrDefault("channelKey", this.channelKey, dart.wrapType(core.String)));
    this.channelName = T.StringN().as(assert_utils.AssertUtils.getValueOrDefault("channelName", this.channelName, dart.wrapType(core.String)));
    this.channelDescription = T.StringN().as(assert_utils.AssertUtils.getValueOrDefault("channelDescription", this.channelDescription, dart.wrapType(core.String)));
    this.channelShowBadge = T.boolN().as(assert_utils.AssertUtils.getValueOrDefault("channelShowBadge", this.channelShowBadge, dart.wrapType(core.bool)));
    this.importance = T.NotificationImportanceN().as(assert_utils.AssertUtils.getValueOrDefault("importance", this.importance, dart.wrapType(notification_importance.NotificationImportance)));
    this.playSound = T.boolN().as(assert_utils.AssertUtils.getValueOrDefault("playSound", this.playSound, dart.wrapType(core.bool)));
    this.soundSource = T.StringN().as(assert_utils.AssertUtils.getValueOrDefault("soundSource", this.soundSource, dart.wrapType(core.String)));
    this.enableVibration = T.boolN().as(assert_utils.AssertUtils.getValueOrDefault("enableVibration", this.enableVibration, dart.wrapType(core.bool)));
    this.vibrationPattern = T.Int64ListN().as(assert_utils.AssertUtils.getValueOrDefault("vibrationPattern", this.vibrationPattern, dart.wrapType(typed_data.Int64List)));
    this.enableLights = T.boolN().as(assert_utils.AssertUtils.getValueOrDefault("enableLights", this.enableLights, dart.wrapType(core.bool)));
    this.ledColor = T.ColorN().as(assert_utils.AssertUtils.getValueOrDefault("ledColor", this.ledColor, dart.wrapType(ui.Color)));
    this.ledOnMs = T.intN().as(assert_utils.AssertUtils.getValueOrDefault("ledOnMs", this.ledOnMs, dart.wrapType(core.int)));
    this.ledOffMs = T.intN().as(assert_utils.AssertUtils.getValueOrDefault("ledOffMs", this.ledOffMs, dart.wrapType(core.int)));
    this.groupKey = T.StringN().as(assert_utils.AssertUtils.getValueOrDefault("groupKey", this.groupKey, dart.wrapType(core.String)));
    this.groupSort = T.GroupSortN().as(assert_utils.AssertUtils.getValueOrDefault("groupSort", this.groupSort, dart.wrapType(group_sort.GroupSort)));
    this.groupAlertBehavior = T.GroupAlertBehaviorN().as(assert_utils.AssertUtils.getValueOrDefault("groupAlertBehavior", this.groupAlertBehavior, dart.wrapType(group_alert_behaviour.GroupAlertBehavior)));
    this.icon = T.StringN().as(assert_utils.AssertUtils.getValueOrDefault("icon", this.icon, dart.wrapType(core.String)));
    this.defaultColor = T.ColorN().as(assert_utils.AssertUtils.getValueOrDefault("defaultColor", this.defaultColor, dart.wrapType(ui.Color)));
    this.locked = T.boolN().as(assert_utils.AssertUtils.getValueOrDefault("locked", this.locked, dart.wrapType(core.bool)));
    this.onlyAlertOnce = T.boolN().as(assert_utils.AssertUtils.getValueOrDefault("onlyAlertOnce", this.onlyAlertOnce, dart.wrapType(core.bool)));
    this.defaultPrivacy = T.NotificationPrivacyN().as(assert_utils.AssertUtils.getValueOrDefault("defaultPrivacy", this.defaultPrivacy, dart.wrapType(notification_privacy.NotificationPrivacy)));
    this.defaultRingtoneType = T.DefaultRingtoneTypeN().as(assert_utils.AssertUtils.getValueOrDefault("defaultRingtoneType", this.defaultRingtoneType, dart.wrapType(default_ringtone_type.DefaultRingtoneType)));
    if (!(dart.test(string_utils.StringUtils.isNullOrEmpty(this.icon)) || bitmap_utils.BitmapUtils.new().getMediaSource(dart.nullCheck(this.icon)) == media_source.MediaSource.Resource)) dart.assertFailed(null, I[10], 116, 12, "StringUtils.isNullOrEmpty(icon) ||\r\n        BitmapUtils().getMediaSource(icon!) == MediaSource.Resource");
  }).prototype = notification_channel.NotificationChannel.prototype;
  dart.addTypeTests(notification_channel.NotificationChannel);
  dart.addTypeCaches(notification_channel.NotificationChannel);
  dart.setMethodSignature(notification_channel.NotificationChannel, () => ({
    __proto__: dart.getMethods(notification_channel.NotificationChannel.__proto__),
    toMap: dart.fnType(core.Map$(core.String, dart.dynamic), []),
    fromMap: dart.fnType(notification_channel.NotificationChannel, [core.Map$(core.String, dart.dynamic)]),
    validate: dart.fnType(dart.void, [])
  }));
  dart.setLibraryUri(notification_channel.NotificationChannel, I[11]);
  dart.setFieldSignature(notification_channel.NotificationChannel, () => ({
    __proto__: dart.getFields(notification_channel.NotificationChannel.__proto__),
    channelKey: dart.fieldType(dart.nullable(core.String)),
    channelName: dart.fieldType(dart.nullable(core.String)),
    channelDescription: dart.fieldType(dart.nullable(core.String)),
    channelShowBadge: dart.fieldType(dart.nullable(core.bool)),
    importance: dart.fieldType(dart.nullable(notification_importance.NotificationImportance)),
    playSound: dart.fieldType(dart.nullable(core.bool)),
    soundSource: dart.fieldType(dart.nullable(core.String)),
    defaultRingtoneType: dart.fieldType(dart.nullable(default_ringtone_type.DefaultRingtoneType)),
    enableVibration: dart.fieldType(dart.nullable(core.bool)),
    vibrationPattern: dart.fieldType(dart.nullable(typed_data.Int64List)),
    enableLights: dart.fieldType(dart.nullable(core.bool)),
    ledColor: dart.fieldType(dart.nullable(ui.Color)),
    ledOnMs: dart.fieldType(dart.nullable(core.int)),
    ledOffMs: dart.fieldType(dart.nullable(core.int)),
    groupKey: dart.fieldType(dart.nullable(core.String)),
    groupSort: dart.fieldType(dart.nullable(group_sort.GroupSort)),
    groupAlertBehavior: dart.fieldType(dart.nullable(group_alert_behaviour.GroupAlertBehavior)),
    defaultPrivacy: dart.fieldType(dart.nullable(notification_privacy.NotificationPrivacy)),
    icon: dart.fieldType(dart.nullable(core.String)),
    defaultColor: dart.fieldType(dart.nullable(ui.Color)),
    locked: dart.fieldType(dart.nullable(core.bool)),
    onlyAlertOnce: dart.fieldType(dart.nullable(core.bool))
  }));
  var drawablePath$ = dart.privateName(resource_image_provider, "ResourceImage.drawablePath");
  var scale$ = dart.privateName(resource_image_provider, "ResourceImage.scale");
  var _loadAsync = dart.privateName(resource_image_provider, "_loadAsync");
  resource_image_provider.ResourceImage = class ResourceImage extends image_provider.ImageProvider {
    get drawablePath() {
      return this[drawablePath$];
    }
    set drawablePath(value) {
      super.drawablePath = value;
    }
    get scale() {
      return this[scale$];
    }
    set scale(value) {
      super.scale = value;
    }
    obtainKey(configuration) {
      if (configuration == null) dart.nullFailed(I[12], 32, 54, "configuration");
      return new (T.SynchronousFutureOfResourceImage()).new(this);
    }
    load(key, decode) {
      resource_image_provider.ResourceImage.as(key);
      if (key == null) dart.nullFailed(I[12], 37, 43, "key");
      if (decode == null) dart.nullFailed(I[12], 37, 64, "decode");
      return new image_stream.MultiFrameImageStreamCompleter.new({codec: this[_loadAsync](key, decode), scale: key.scale});
    }
    [_loadAsync](key, decode) {
      if (key == null) dart.nullFailed(I[12], 44, 45, "key");
      if (decode == null) dart.nullFailed(I[12], 44, 66, "decode");
      return async.async(ui.Codec, (function* _loadAsync() {
        if (!dart.equals(key, this)) dart.assertFailed(null, I[12], 45, 12, "key == this");
        let bytes = null;
        let awesomeNotifications = awesome_notifications_core.AwesomeNotifications.new();
        bytes = (yield awesomeNotifications.getDrawableData(this.drawablePath));
        return decode(dart.nullCheck(bytes));
      }).bind(this));
    }
    _equals(other) {
      if (other == null) return false;
      if (!dart.equals(dart.runtimeType(other), this[$runtimeType])) return false;
      return resource_image_provider.ResourceImage.is(other) && other.drawablePath == this.drawablePath && other.scale == this.scale;
    }
    get hashCode() {
      return ui.hashValues(dart.hashCode(this.drawablePath), this.scale);
    }
    toString() {
      return dart.str(object.objectRuntimeType(this, "ResourceImage")) + "(" + dart.str(this.drawablePath) + ", scale: " + dart.str(this.scale) + ")";
    }
  };
  (resource_image_provider.ResourceImage.new = function(drawablePath, opts) {
    if (drawablePath == null) dart.nullFailed(I[12], 24, 28, "drawablePath");
    let scale = opts && 'scale' in opts ? opts.scale : 1;
    if (scale == null) dart.nullFailed(I[12], 24, 48, "scale");
    this[drawablePath$] = drawablePath;
    this[scale$] = scale;
    resource_image_provider.ResourceImage.__proto__.new.call(this);
    ;
  }).prototype = resource_image_provider.ResourceImage.prototype;
  dart.addTypeTests(resource_image_provider.ResourceImage);
  dart.addTypeCaches(resource_image_provider.ResourceImage);
  dart.setMethodSignature(resource_image_provider.ResourceImage, () => ({
    __proto__: dart.getMethods(resource_image_provider.ResourceImage.__proto__),
    obtainKey: dart.fnType(async.Future$(resource_image_provider.ResourceImage), [image_provider.ImageConfiguration]),
    load: dart.fnType(image_stream.ImageStreamCompleter, [dart.nullable(core.Object), dart.fnType(async.Future$(ui.Codec), [typed_data.Uint8List], {allowUpscaling: core.bool, cacheHeight: dart.nullable(core.int), cacheWidth: dart.nullable(core.int)}, {})]),
    [_loadAsync]: dart.fnType(async.Future$(ui.Codec), [resource_image_provider.ResourceImage, dart.fnType(async.Future$(ui.Codec), [typed_data.Uint8List], {allowUpscaling: core.bool, cacheHeight: dart.nullable(core.int), cacheWidth: dart.nullable(core.int)}, {})])
  }));
  dart.setLibraryUri(resource_image_provider.ResourceImage, I[13]);
  dart.setFieldSignature(resource_image_provider.ResourceImage, () => ({
    __proto__: dart.getFields(resource_image_provider.ResourceImage.__proto__),
    drawablePath: dart.finalFieldType(core.String),
    scale: dart.finalFieldType(core.double)
  }));
  dart.defineExtensionMethods(resource_image_provider.ResourceImage, ['_equals', 'toString']);
  dart.defineExtensionAccessors(resource_image_provider.ResourceImage, ['hashCode']);
  bitmap_utils.BitmapUtils = class BitmapUtils extends media_abstract_utils.MediaUtils {
    static new() {
      return bitmap_utils.BitmapUtils._instance;
    }
    getFromMediaAsset(mediaPath) {
      if (mediaPath == null) dart.nullFailed(I[14], 20, 42, "mediaPath");
      return new image_resolution.AssetImage.new(this.cleanMediaPath(mediaPath));
    }
    getFromMediaFile(mediaPath) {
      if (mediaPath == null) dart.nullFailed(I[14], 25, 41, "mediaPath");
      return new image_provider.FileImage.new(io.File.new(this.cleanMediaPath(mediaPath)));
    }
    getFromMediaNetwork(mediaPath) {
      if (mediaPath == null) dart.nullFailed(I[14], 30, 44, "mediaPath");
      return new _network_image_web.NetworkImage.new(mediaPath);
    }
    getFromMediaResource(mediaPath) {
      if (mediaPath == null) dart.nullFailed(I[14], 35, 45, "mediaPath");
      return new resource_image_provider.ResourceImage.new(mediaPath);
    }
  };
  (bitmap_utils.BitmapUtils.private = function() {
    ;
  }).prototype = bitmap_utils.BitmapUtils.prototype;
  dart.addTypeTests(bitmap_utils.BitmapUtils);
  dart.addTypeCaches(bitmap_utils.BitmapUtils);
  dart.setMethodSignature(bitmap_utils.BitmapUtils, () => ({
    __proto__: dart.getMethods(bitmap_utils.BitmapUtils.__proto__),
    getFromMediaAsset: dart.fnType(image_provider.ImageProvider$(core.Object), [core.String]),
    getFromMediaFile: dart.fnType(image_provider.ImageProvider$(core.Object), [core.String]),
    getFromMediaNetwork: dart.fnType(image_provider.ImageProvider$(core.Object), [core.String]),
    getFromMediaResource: dart.fnType(image_provider.ImageProvider$(core.Object), [core.String])
  }));
  dart.setLibraryUri(bitmap_utils.BitmapUtils, I[15]);
  dart.defineLazy(bitmap_utils.BitmapUtils, {
    /*bitmap_utils.BitmapUtils._instance*/get _instance() {
      return new bitmap_utils.BitmapUtils.private();
    }
  }, false);
  var key$ = dart.privateName(notification_button, "NotificationActionButton.key");
  var label$ = dart.privateName(notification_button, "NotificationActionButton.label");
  var icon$1 = dart.privateName(notification_button, "NotificationActionButton.icon");
  var enabled$ = dart.privateName(notification_button, "NotificationActionButton.enabled");
  var autoDismissible$0 = dart.privateName(notification_button, "NotificationActionButton.autoDismissible");
  var buttonType$ = dart.privateName(notification_button, "NotificationActionButton.buttonType");
  var _name = dart.privateName(action_button_type, "_name");
  notification_button.NotificationActionButton = class NotificationActionButton extends model.Model {
    get key() {
      return this[key$];
    }
    set key(value) {
      this[key$] = value;
    }
    get label() {
      return this[label$];
    }
    set label(value) {
      this[label$] = value;
    }
    get icon() {
      return this[icon$1];
    }
    set icon(value) {
      this[icon$1] = value;
    }
    get enabled() {
      return this[enabled$];
    }
    set enabled(value) {
      this[enabled$] = value;
    }
    get autoDismissible() {
      return this[autoDismissible$0];
    }
    set autoDismissible(value) {
      this[autoDismissible$0] = value;
    }
    get buttonType() {
      return this[buttonType$];
    }
    set buttonType(value) {
      this[buttonType$] = value;
    }
    fromMap(dataMap) {
      let t2;
      if (dataMap == null) dart.nullFailed(I[16], 35, 58, "dataMap");
      this.key = T.StringN().as(assert_utils.AssertUtils.extractValue(dart.dynamic, dataMap, "key"));
      this.icon = T.StringN().as(assert_utils.AssertUtils.extractValue(dart.dynamic, dataMap, "icon"));
      this.label = T.StringN().as(assert_utils.AssertUtils.extractValue(dart.dynamic, dataMap, "label"));
      this.enabled = T.boolN().as(assert_utils.AssertUtils.extractValue(dart.dynamic, dataMap, "enabled"));
      this.autoDismissible = T.boolN().as(assert_utils.AssertUtils.extractValue(dart.dynamic, dataMap, "autoDismissible"));
      this.buttonType = (t2 = assert_utils.AssertUtils.extractEnum(action_button_type.ActionButtonType, dataMap, "buttonType", action_button_type.ActionButtonType.values), t2 == null ? action_button_type.ActionButtonType.Default : t2);
      return this;
    }
    toMap() {
      return new (T.IdentityMapOfString$dynamic()).from(["key", this.key, "icon", this.icon, "label", this.label, "enabled", this.enabled, "autoDismissible", this.autoDismissible, "buttonType", assert_utils.AssertUtils.toSimpleEnumString(action_button_type.ActionButtonType, this.buttonType)]);
    }
    validate() {
      if (!!dart.test(assert_utils.AssertUtils.isNullOrEmptyOrInvalid(dart.dynamic, this.key, dart.wrapType(core.String)))) dart.assertFailed(null, I[16], 62, 12, "!AssertUtils.isNullOrEmptyOrInvalid(key, String)");
      if (!!dart.test(assert_utils.AssertUtils.isNullOrEmptyOrInvalid(dart.dynamic, this.label, dart.wrapType(core.String)))) dart.assertFailed(null, I[16], 63, 12, "!AssertUtils.isNullOrEmptyOrInvalid(label, String)");
      if (!!dart.test(assert_utils.AssertUtils.isNullOrEmptyOrInvalid(dart.dynamic, this.autoDismissible, dart.wrapType(core.bool)))) dart.assertFailed(null, I[16], 64, 12, "!AssertUtils.isNullOrEmptyOrInvalid(autoDismissible, bool)");
      if (!(dart.test(string_utils.StringUtils.isNullOrEmpty(this.icon)) || bitmap_utils.BitmapUtils.new().getMediaSource(dart.nullCheck(this.icon)) == media_source.MediaSource.Resource)) dart.assertFailed(null, I[16], 67, 12, "StringUtils.isNullOrEmpty(icon) ||\r\n        BitmapUtils().getMediaSource(icon!) == MediaSource.Resource");
    }
  };
  (notification_button.NotificationActionButton.new = function(opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    let icon = opts && 'icon' in opts ? opts.icon : null;
    let label = opts && 'label' in opts ? opts.label : null;
    let enabled = opts && 'enabled' in opts ? opts.enabled : null;
    let autoDismissible = opts && 'autoDismissible' in opts ? opts.autoDismissible : null;
    let buttonType = opts && 'buttonType' in opts ? opts.buttonType : C[0] || CT.C0;
    if (buttonType == null) dart.nullFailed(I[16], 32, 12, "buttonType");
    this[key$] = key;
    this[icon$1] = icon;
    this[label$] = label;
    this[enabled$] = enabled;
    this[autoDismissible$0] = autoDismissible;
    this[buttonType$] = buttonType;
    notification_button.NotificationActionButton.__proto__.new.call(this);
    ;
  }).prototype = notification_button.NotificationActionButton.prototype;
  dart.addTypeTests(notification_button.NotificationActionButton);
  dart.addTypeCaches(notification_button.NotificationActionButton);
  dart.setMethodSignature(notification_button.NotificationActionButton, () => ({
    __proto__: dart.getMethods(notification_button.NotificationActionButton.__proto__),
    fromMap: dart.fnType(dart.nullable(notification_button.NotificationActionButton), [core.Map$(core.String, dart.dynamic)]),
    toMap: dart.fnType(core.Map$(core.String, dart.dynamic), []),
    validate: dart.fnType(dart.void, [])
  }));
  dart.setLibraryUri(notification_button.NotificationActionButton, I[17]);
  dart.setFieldSignature(notification_button.NotificationActionButton, () => ({
    __proto__: dart.getFields(notification_button.NotificationActionButton.__proto__),
    key: dart.fieldType(dart.nullable(core.String)),
    label: dart.fieldType(dart.nullable(core.String)),
    icon: dart.fieldType(dart.nullable(core.String)),
    enabled: dart.fieldType(dart.nullable(core.bool)),
    autoDismissible: dart.fieldType(dart.nullable(core.bool)),
    buttonType: dart.fieldType(action_button_type.ActionButtonType)
  }));
  var _createdSubject = dart.privateName(awesome_notifications_core, "_createdSubject");
  var _displayedSubject = dart.privateName(awesome_notifications_core, "_displayedSubject");
  var _actionSubject = dart.privateName(awesome_notifications_core, "_actionSubject");
  var _dismissedSubject = dart.privateName(awesome_notifications_core, "_dismissedSubject");
  var _channel = dart.privateName(awesome_notifications_core, "_channel");
  var _handleMethod = dart.privateName(awesome_notifications_core, "_handleMethod");
  var _validateId = dart.privateName(awesome_notifications_core, "_validateId");
  var MethodChannel__binaryMessenger = dart.privateName(platform_channel, "MethodChannel._binaryMessenger");
  var StandardMethodCodec_messageCodec = dart.privateName(message_codecs, "StandardMethodCodec.messageCodec");
  var MethodChannel_codec = dart.privateName(platform_channel, "MethodChannel.codec");
  var MethodChannel_name = dart.privateName(platform_channel, "MethodChannel.name");
  awesome_notifications_core.AwesomeNotifications = class AwesomeNotifications extends core.Object {
    get createdStream() {
      return this[_createdSubject].stream;
    }
    get displayedStream() {
      return this[_displayedSubject].stream;
    }
    get dismissedStream() {
      return this[_dismissedSubject].stream;
    }
    get actionStream() {
      return this[_actionSubject].stream;
    }
    get createdSink() {
      return this[_createdSubject].sink;
    }
    get displayedSink() {
      return this[_displayedSubject].sink;
    }
    get dismissedSink() {
      return this[_dismissedSubject].sink;
    }
    get actionSink() {
      return this[_actionSubject].sink;
    }
    dispose() {
      this[_createdSubject].close();
      this[_displayedSubject].close();
      this[_dismissedSubject].close();
      this[_actionSubject].close();
    }
    static new() {
      return awesome_notifications_core.AwesomeNotifications._instance;
    }
    initialize(defaultIcon, channels) {
      if (channels == null) dart.nullFailed(I[18], 130, 54, "channels");
      return async.async(core.bool, (function* initialize() {
        binding.WidgetsFlutterBinding.ensureInitialized();
        this[_channel].setMethodCallHandler(dart.bind(this, _handleMethod));
        let serializedChannels = [];
        for (let channel of channels) {
          serializedChannels[$add](channel.toMap());
        }
        let defaultIconPath = null;
        if (!dart.test(assert_utils.AssertUtils.isNullOrEmptyOrInvalid(core.String, defaultIcon, dart.wrapType(core.String)))) {
          if (!(bitmap_utils.BitmapUtils.new().getMediaSource(dart.nullCheck(defaultIcon)) == media_source.MediaSource.Resource)) dart.assertFailed(null, I[18], 144, 11, "BitmapUtils().getMediaSource(defaultIcon!) == MediaSource.Resource");
          defaultIconPath = defaultIcon;
        }
        let result = (yield this[_channel].invokeMethod(dart.dynamic, "initialize", new (T.IdentityMapOfString$ObjectN()).from(["defaultIcon", defaultIconPath, "initializeChannels", serializedChannels])));
        return T.FutureOrOfbool().as(result);
      }).bind(this));
    }
    getDrawableData(drawablePath) {
      if (drawablePath == null) dart.nullFailed(I[18], 159, 45, "drawablePath");
      return async.async(T.Uint8ListN(), (function* getDrawableData() {
        let result2 = (yield this[_channel].invokeMethod(dart.dynamic, "getDrawableData", drawablePath));
        if (result2 == null) return null;
        return T.FutureOrOfUint8ListN().as(result2);
      }).bind(this));
    }
    [_handleMethod](call) {
      if (call == null) dart.nullFailed(I[18], 168, 44, "call");
      return async.async(dart.dynamic, (function* _handleMethod() {
        let $arguments = T.LinkedHashMapOfString$dynamic().from(core.Map.as(call.arguments));
        switch (call.method) {
          case "notificationCreated":
          {
            this[_createdSubject].sink.add(new received_notification.ReceivedNotification.new().fromMap($arguments));
            return;
          }
          case "notificationDisplayed":
          {
            this[_displayedSubject].sink.add(new received_notification.ReceivedNotification.new().fromMap($arguments));
            return;
          }
          case "notificationDismissed":
          {
            this[_dismissedSubject].sink.add(received_action.ReceivedAction.as(new received_action.ReceivedAction.new().fromMap($arguments)));
            return;
          }
          case "receivedAction":
          {
            this[_actionSubject].sink.add(received_action.ReceivedAction.as(new received_action.ReceivedAction.new().fromMap($arguments)));
            return;
          }
          default:
          {
            dart.throw(new core.UnsupportedError.new("Unrecognized JSON message"));
          }
        }
      }).bind(this));
    }
    [_validateId](id) {
      if (id == null) dart.nullFailed(I[18], 200, 24, "id");
      if (dart.notNull(id) > 2147483647 || dart.notNull(id) < -2147483648) {
        dart.throw(new core.ArgumentError.new("The id field must be the limited to 32-bit size integer"));
      }
    }
    createNotification(opts) {
      let content = opts && 'content' in opts ? opts.content : null;
      if (content == null) dart.nullFailed(I[18], 213, 34, "content");
      let schedule = opts && 'schedule' in opts ? opts.schedule : null;
      let actionButtons = opts && 'actionButtons' in opts ? opts.actionButtons : null;
      return async.async(core.bool, (function* createNotification() {
        this[_validateId](dart.nullCheck(content.id));
        try {
          let wasCreated = core.bool.as(yield this[_channel].invokeMethod(dart.dynamic, "createNewNotification", new push_notification.NotificationModel.new({content: content, schedule: schedule, actionButtons: actionButtons}).toMap()));
          return wasCreated;
        } catch (e) {
          let error = dart.getThrown(e);
          if (message_codec.PlatformException.is(error)) {
            core.print(error);
          } else
            throw e;
        }
        return false;
      }).bind(this));
    }
    createNotificationFromJsonData(mapData) {
      if (mapData == null) dart.nullFailed(I[18], 236, 28, "mapData");
      return async.async(core.bool, (function* createNotificationFromJsonData() {
        try {
          if (dart.equals(dart.runtimeType(mapData[$_get]("content")), dart.wrapType(core.String))) mapData[$_set]("content", convert.json.decode(core.String.as(mapData[$_get]("content"))));
          if (dart.equals(dart.runtimeType(mapData[$_get]("schedule")), dart.wrapType(core.String))) mapData[$_set]("schedule", convert.json.decode(core.String.as(mapData[$_get]("schedule"))));
          if (dart.equals(dart.runtimeType(mapData[$_get]("actionButtons")), dart.wrapType(core.String))) mapData[$_set]("actionButtons", convert.json.decode(core.String.as(mapData[$_get]("actionButtons"))));
          let notificationModel = new push_notification.NotificationModel.new().fromMap(mapData);
          if (notificationModel == null) {
            dart.throw(core.Exception.new("Notification map data is invalid"));
          }
          return this.createNotification({content: dart.nullCheck(notificationModel.content), schedule: notificationModel.schedule, actionButtons: notificationModel.actionButtons});
        } catch (e$) {
          let e = dart.getThrown(e$);
          if (core.Object.is(e)) {
            return false;
          } else
            throw e$;
        }
      }).bind(this));
    }
    isNotificationAllowed() {
      return async.async(core.bool, (function* isNotificationAllowed() {
        let isAllowed = core.bool.as(yield this[_channel].invokeMethod(dart.dynamic, "isNotificationAllowed"));
        return isAllowed;
      }).bind(this));
    }
    requestPermissionToSendNotifications() {
      return async.async(core.bool, (function* requestPermissionToSendNotifications() {
        let isAllowed = core.bool.as(yield this[_channel].invokeMethod(dart.dynamic, "requestNotifications"));
        return isAllowed;
      }).bind(this));
    }
    listScheduledNotifications() {
      return async.async(T.ListOfNotificationModel(), (function* listScheduledNotifications() {
        let scheduledNotifications = T.JSArrayOfNotificationModel().of([]);
        let returned = (yield this[_channel].invokeListMethod(core.Object, "listAllSchedules"));
        if (returned != null) {
          for (let object of returned) {
            if (core.Map.is(object)) {
              try {
                let notificationModel = dart.nullCheck(new push_notification.NotificationModel.new().fromMap(T.LinkedHashMapOfString$dynamic().from(object)));
                scheduledNotifications[$add](notificationModel);
              } catch (e$) {
                let e = dart.getThrown(e$);
                if (core.Object.is(e)) {
                  return T.JSArrayOfNotificationModel().of([]);
                } else
                  throw e$;
              }
            }
          }
        }
        return scheduledNotifications;
      }).bind(this));
    }
    setChannel(notificationChannel, opts) {
      if (notificationChannel == null) dart.nullFailed(I[18], 303, 25, "notificationChannel");
      let forceUpdate = opts && 'forceUpdate' in opts ? opts.forceUpdate : false;
      if (forceUpdate == null) dart.nullFailed(I[18], 304, 10, "forceUpdate");
      return async.async(dart.void, (function* setChannel() {
        let parameters = notificationChannel.toMap();
        parameters[$addAll](new (T.IdentityMapOfString$dynamic()).from(["forceUpdate", forceUpdate]));
        yield this[_channel].invokeMethod(dart.dynamic, "setNotificationChannel", parameters);
      }).bind(this));
    }
    removeChannel(channelKey) {
      if (channelKey == null) dart.nullFailed(I[18], 314, 37, "channelKey");
      return async.async(core.bool, (function* removeChannel() {
        let wasRemoved = core.bool.as(yield this[_channel].invokeMethod(dart.dynamic, "removeNotificationChannel", channelKey));
        return wasRemoved;
      }).bind(this));
    }
    setGlobalBadgeCounter(amount) {
      return async.async(dart.void, (function* setGlobalBadgeCounter() {
        if (amount == null) {
          return;
        }
        let data = new (T.IdentityMapOfString$dynamic()).from(["channelShowBadge", amount]);
        yield this[_channel].invokeMethod(dart.dynamic, "setBadgeCount", data);
      }).bind(this));
    }
    getGlobalBadgeCounter() {
      return async.async(core.int, (function* getGlobalBadgeCounter() {
        let badgeCount = core.int.as(yield this[_channel].invokeMethod(dart.dynamic, "getBadgeCount"));
        return badgeCount;
      }).bind(this));
    }
    resetGlobalBadge() {
      return async.async(dart.void, (function* resetGlobalBadge() {
        yield this[_channel].invokeListMethod(dart.dynamic, "resetBadge");
      }).bind(this));
    }
    getNextDate(schedule, opts) {
      if (schedule == null) dart.nullFailed(I[18], 345, 26, "schedule");
      let fixedDate = opts && 'fixedDate' in opts ? opts.fixedDate : null;
      return async.async(T.DateTimeN(), (function* getNextDate() {
        fixedDate == null ? fixedDate = new core.DateTime.now().toUtc() : null;
        let parameters = new _js_helper.LinkedMap.from(["fixedDate", date_utils.DateUtils.parseDateToString(fixedDate), "schedule", schedule.toMap()]);
        let nextDate = (yield this[_channel].invokeMethod(core.String, "getNextDate", parameters));
        if (nextDate == null) return null;
        return dart.nullCheck(date_utils.DateUtils.parseStringToDate(nextDate));
      }).bind(this));
    }
    cancel(id) {
      if (id == null) dart.nullFailed(I[18], 363, 27, "id");
      return async.async(dart.void, (function* cancel() {
        this[_validateId](id);
        yield this[_channel].invokeMethod(dart.dynamic, "cancelNotification", id);
      }).bind(this));
    }
    cancelSchedule(id) {
      if (id == null) dart.nullFailed(I[18], 369, 35, "id");
      return async.async(dart.void, (function* cancelSchedule() {
        this[_validateId](id);
        yield this[_channel].invokeMethod(dart.dynamic, "cancelSchedule", id);
      }).bind(this));
    }
    cancelAllSchedules() {
      return async.async(dart.void, (function* cancelAllSchedules() {
        yield this[_channel].invokeMethod(dart.dynamic, "cancelAllSchedules");
      }).bind(this));
    }
    cancelAll() {
      return async.async(dart.void, (function* cancelAll() {
        yield this[_channel].invokeMethod(dart.dynamic, "cancelAllNotifications");
      }).bind(this));
    }
  };
  (awesome_notifications_core.AwesomeNotifications.private = function(channel) {
    if (channel == null) dart.nullFailed(I[18], 118, 46, "channel");
    this[_createdSubject] = T.StreamControllerOfReceivedNotification().new();
    this[_displayedSubject] = T.StreamControllerOfReceivedNotification().new();
    this[_actionSubject] = T.StreamControllerOfReceivedAction().new();
    this[_dismissedSubject] = T.StreamControllerOfReceivedAction().new();
    this[_channel] = channel;
    ;
  }).prototype = awesome_notifications_core.AwesomeNotifications.prototype;
  dart.addTypeTests(awesome_notifications_core.AwesomeNotifications);
  dart.addTypeCaches(awesome_notifications_core.AwesomeNotifications);
  dart.setMethodSignature(awesome_notifications_core.AwesomeNotifications, () => ({
    __proto__: dart.getMethods(awesome_notifications_core.AwesomeNotifications.__proto__),
    dispose: dart.fnType(dart.dynamic, []),
    initialize: dart.fnType(async.Future$(core.bool), [dart.nullable(core.String), core.List$(notification_channel.NotificationChannel)]),
    getDrawableData: dart.fnType(async.Future$(dart.nullable(typed_data.Uint8List)), [core.String]),
    [_handleMethod]: dart.fnType(async.Future, [message_codec.MethodCall]),
    [_validateId]: dart.fnType(dart.void, [core.int]),
    createNotification: dart.fnType(async.Future$(core.bool), [], {actionButtons: dart.nullable(core.List$(notification_button.NotificationActionButton)), schedule: dart.nullable(notification_schedule.NotificationSchedule)}, {content: notification_content.NotificationContent}),
    createNotificationFromJsonData: dart.fnType(async.Future$(core.bool), [core.Map$(core.String, dart.dynamic)]),
    isNotificationAllowed: dart.fnType(async.Future$(core.bool), []),
    requestPermissionToSendNotifications: dart.fnType(async.Future$(core.bool), []),
    listScheduledNotifications: dart.fnType(async.Future$(core.List$(push_notification.NotificationModel)), []),
    setChannel: dart.fnType(async.Future$(dart.void), [notification_channel.NotificationChannel], {forceUpdate: core.bool}, {}),
    removeChannel: dart.fnType(async.Future$(core.bool), [core.String]),
    setGlobalBadgeCounter: dart.fnType(async.Future$(dart.void), [dart.nullable(core.int)]),
    getGlobalBadgeCounter: dart.fnType(async.Future$(core.int), []),
    resetGlobalBadge: dart.fnType(async.Future$(dart.void), []),
    getNextDate: dart.fnType(async.Future$(dart.nullable(core.DateTime)), [notification_schedule.NotificationSchedule], {fixedDate: dart.nullable(core.DateTime)}, {}),
    cancel: dart.fnType(async.Future$(dart.void), [core.int]),
    cancelSchedule: dart.fnType(async.Future$(dart.void), [core.int]),
    cancelAllSchedules: dart.fnType(async.Future$(dart.void), []),
    cancelAll: dart.fnType(async.Future$(dart.void), [])
  }));
  dart.setGetterSignature(awesome_notifications_core.AwesomeNotifications, () => ({
    __proto__: dart.getGetters(awesome_notifications_core.AwesomeNotifications.__proto__),
    createdStream: async.Stream$(received_notification.ReceivedNotification),
    displayedStream: async.Stream$(received_notification.ReceivedNotification),
    dismissedStream: async.Stream$(received_action.ReceivedAction),
    actionStream: async.Stream$(received_action.ReceivedAction),
    createdSink: core.Sink,
    displayedSink: core.Sink,
    dismissedSink: core.Sink,
    actionSink: core.Sink
  }));
  dart.setLibraryUri(awesome_notifications_core.AwesomeNotifications, I[19]);
  dart.setFieldSignature(awesome_notifications_core.AwesomeNotifications, () => ({
    __proto__: dart.getFields(awesome_notifications_core.AwesomeNotifications.__proto__),
    [_createdSubject]: dart.finalFieldType(async.StreamController$(received_notification.ReceivedNotification)),
    [_displayedSubject]: dart.finalFieldType(async.StreamController$(received_notification.ReceivedNotification)),
    [_actionSubject]: dart.finalFieldType(async.StreamController$(received_action.ReceivedAction)),
    [_dismissedSubject]: dart.finalFieldType(async.StreamController$(received_action.ReceivedAction)),
    [_channel]: dart.finalFieldType(platform_channel.MethodChannel)
  }));
  dart.defineLazy(awesome_notifications_core.AwesomeNotifications, {
    /*awesome_notifications_core.AwesomeNotifications.rootNativePath*/get rootNativePath() {
      return null;
    },
    set rootNativePath(_) {},
    /*awesome_notifications_core.AwesomeNotifications._instance*/get _instance() {
      return new awesome_notifications_core.AwesomeNotifications.private(C[1] || CT.C1);
    }
  }, false);
  dart.setBaseClass(resource_image_provider.ResourceImage, image_provider.ImageProvider$(resource_image_provider.ResourceImage));
  dart.trackLibraries("packages/awesome_notifications/src/models/received_models/received_notification.dart", {
    "package:awesome_notifications/src/models/received_models/received_notification.dart": received_notification,
    "package:awesome_notifications/src/models/received_models/received_action.dart": received_action,
    "package:awesome_notifications/src/models/received_models/push_notification.dart": push_notification,
    "package:awesome_notifications/src/models/basic_notification_content.dart": basic_notification_content,
    "package:awesome_notifications/src/models/notification_content.dart": notification_content,
    "package:awesome_notifications/src/models/notification_channel.dart": notification_channel,
    "package:awesome_notifications/src/utils/resource_image_provider.dart": resource_image_provider,
    "package:awesome_notifications/src/utils/bitmap_utils.dart": bitmap_utils,
    "package:awesome_notifications/src/models/notification_button.dart": notification_button,
    "package:awesome_notifications/src/awesome_notifications_core.dart": awesome_notifications_core
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["../basic_notification_content.dart","received_notification.dart","received_action.dart","push_notification.dart","../notification_content.dart","../notification_channel.dart","../../utils/resource_image_provider.dart","../../utils/bitmap_utils.dart","../notification_button.dart","../../awesome_notifications_core.dart"],"names":[],"mappings":"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","file":"../../../../../../packages/awesome_notifications/src/models/received_models/received_notification.dart.lib.js"}');
  // Exports:
  return {
    src__models__received_models__received_notification: received_notification,
    src__models__received_models__received_action: received_action,
    src__models__received_models__push_notification: push_notification,
    src__models__basic_notification_content: basic_notification_content,
    src__models__notification_content: notification_content,
    src__models__notification_channel: notification_channel,
    src__utils__resource_image_provider: resource_image_provider,
    src__utils__bitmap_utils: bitmap_utils,
    src__models__notification_button: notification_button,
    src__awesome_notifications_core: awesome_notifications_core
  };
}));

//# sourceMappingURL=received_notification.dart.lib.js.map
